{"version":3,"file":"static/js/605.3d41e232.chunk.js","mappings":"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","sources":["../node_modules/@telegram-apps/sdk/src/misc/createSingleton.ts","../node_modules/@telegram-apps/sdk/src/bridge/events/listening/unsubscribe.ts","../node_modules/@telegram-apps/sdk/src/bridge/events/listening/subscribe.ts","../node_modules/@telegram-apps/sdk/src/debug/debug.ts","../node_modules/@telegram-apps/sdk/src/logger/Logger.ts","../node_modules/@telegram-apps/sdk/src/events/event-emitter/EventEmitter.ts","../node_modules/@telegram-apps/sdk/src/events/onWindow.ts","../node_modules/@telegram-apps/sdk/src/misc/createCleanup.ts","../node_modules/@telegram-apps/sdk/src/errors/SDKError.ts","../node_modules/@telegram-apps/sdk/src/errors/createError.ts","../node_modules/@telegram-apps/sdk/src/errors/errors.ts","../node_modules/@telegram-apps/sdk/src/parsing/createTypeError.ts","../node_modules/@telegram-apps/sdk/src/parsing/ValueParser/ValueParser.ts","../node_modules/@telegram-apps/sdk/src/parsing/createValueParserGenerator.ts","../node_modules/@telegram-apps/sdk/src/parsing/parsers/boolean.ts","../node_modules/@telegram-apps/sdk/src/parsing/parseBySchema.ts","../node_modules/@telegram-apps/sdk/src/parsing/toRecord.ts","../node_modules/@telegram-apps/sdk/src/parsing/parsers/json.ts","../node_modules/@telegram-apps/sdk/src/parsing/parsers/number.ts","../node_modules/@telegram-apps/sdk/src/parsing/parsers/string.ts","../node_modules/@telegram-apps/sdk/src/bridge/parseMessage.ts","../node_modules/@telegram-apps/sdk/src/bridge/events/event-handlers/cleanupEventHandlers.ts","../node_modules/@telegram-apps/sdk/src/bridge/events/event-handlers/emitMiniAppsEvent.ts","../node_modules/@telegram-apps/sdk/src/bridge/events/event-emitter/createMiniAppsEventEmitter.ts","../node_modules/@telegram-apps/sdk/src/bridge/events/event-handlers/defineEventHandlers.ts","../node_modules/@telegram-apps/sdk/src/bridge/events/event-emitter/singleton.ts","../node_modules/@telegram-apps/sdk/src/bridge/events/listening/off.ts","../node_modules/@telegram-apps/sdk/src/bridge/events/listening/on.ts","../node_modules/@telegram-apps/sdk/src/misc/isRecord.ts","../node_modules/@telegram-apps/sdk/src/version/compareVersions.ts","../node_modules/@telegram-apps/sdk/src/supports/supports.ts","../node_modules/@telegram-apps/sdk/src/env/hasExternalNotify.ts","../node_modules/@telegram-apps/sdk/src/env/hasWebviewProxy.ts","../node_modules/@telegram-apps/sdk/src/env/isIframe.ts","../node_modules/@telegram-apps/sdk/src/bridge/target-origin.ts","../node_modules/@telegram-apps/sdk/src/bridge/methods/postEvent.ts","../node_modules/@telegram-apps/sdk/src/bridge/methods/createPostEvent.ts","../node_modules/@telegram-apps/sdk/src/bridge/captureSameReq.ts","../node_modules/@telegram-apps/sdk/src/timeout/createTimeoutError.ts","../node_modules/@telegram-apps/sdk/src/timeout/withTimeout.ts","../node_modules/@telegram-apps/sdk/src/bridge/request.ts","../node_modules/@telegram-apps/sdk/src/bridge/invokeCustomMethod.ts","../node_modules/@telegram-apps/sdk/src/classnames/classNames.ts","../node_modules/@telegram-apps/sdk/src/classnames/mergeClassNames.ts","../node_modules/@telegram-apps/sdk/src/colors/isRGB.ts","../node_modules/@telegram-apps/sdk/src/colors/isRGBShort.ts","../node_modules/@telegram-apps/sdk/src/colors/toRGB.ts","../node_modules/@telegram-apps/sdk/src/colors/isColorDark.ts","../node_modules/@telegram-apps/sdk/src/classes/State/State.ts","../node_modules/@telegram-apps/sdk/src/classes/WithStateUtils.ts","../node_modules/@telegram-apps/sdk/src/supports/createSupportsFn.ts","../node_modules/@telegram-apps/sdk/src/classes/WithSupportsAndStateUtils.ts","../node_modules/@telegram-apps/sdk/src/components/BackButton/BackButton.ts","../node_modules/@telegram-apps/sdk/src/parsing/parsers/date.ts","../node_modules/@telegram-apps/sdk/src/parsing/parsers/searchParams.ts","../node_modules/@telegram-apps/sdk/src/components/InitData/parsers/chat.ts","../node_modules/@telegram-apps/sdk/src/components/InitData/parsers/user.ts","../node_modules/@telegram-apps/sdk/src/components/InitData/parsers/initData.ts","../node_modules/@telegram-apps/sdk/src/parsing/parsers/rgb.ts","../node_modules/@telegram-apps/sdk/src/components/ThemeParams/keys.ts","../node_modules/@telegram-apps/sdk/src/components/ThemeParams/parsing/themeParams.ts","../node_modules/@telegram-apps/sdk/src/launch-params/parseLaunchParams.ts","../node_modules/@telegram-apps/sdk/src/launch-params/retrieveFromUrl.ts","../node_modules/@telegram-apps/sdk/src/launch-params/retrieveFromLocation.ts","../node_modules/@telegram-apps/sdk/src/navigation/getFirstNavigationEntry.ts","../node_modules/@telegram-apps/sdk/src/launch-params/retrieveFromPerformance.ts","../node_modules/@telegram-apps/sdk/src/storage/storage.ts","../node_modules/@telegram-apps/sdk/src/launch-params/retrieveFromStorage.ts","../node_modules/@telegram-apps/sdk/src/components/ThemeParams/parsing/serializeThemeParams.ts","../node_modules/@telegram-apps/sdk/src/launch-params/serializeLaunchParams.ts","../node_modules/@telegram-apps/sdk/src/launch-params/saveToStorage.ts","../node_modules/@telegram-apps/sdk/src/launch-params/retrieveLaunchParams.ts","../node_modules/@telegram-apps/sdk/src/navigation/isPageReload.ts","../node_modules/@telegram-apps/sdk/src/misc/createComponentInitFn/createComponentInitFn.ts","../node_modules/@telegram-apps/sdk/src/request-id/createRequestIdGenerator.ts","../node_modules/@telegram-apps/sdk/src/components/BackButton/initBackButton.ts","../node_modules/@telegram-apps/sdk/src/classes/WithSupportsAndTrackableState.ts","../node_modules/@telegram-apps/sdk/src/components/BiometryManager/formatEvent.ts","../node_modules/@telegram-apps/sdk/src/components/BiometryManager/BiometryManager.ts","../node_modules/@telegram-apps/sdk/src/components/BiometryManager/requestBiometryInfo.ts","../node_modules/@telegram-apps/sdk/src/components/BiometryManager/initBiometryManager.ts","../node_modules/@telegram-apps/sdk/src/classes/WithTrackableState.ts","../node_modules/@telegram-apps/sdk/src/components/ClosingBehavior/ClosingBehavior.ts","../node_modules/@telegram-apps/sdk/src/components/ClosingBehavior/initClosingBehavior.ts","../node_modules/@telegram-apps/sdk/src/classes/WithSupports.ts","../node_modules/@telegram-apps/sdk/src/parsing/ArrayParser/ArrayParser.ts","../node_modules/@telegram-apps/sdk/src/parsing/parsers/array.ts","../node_modules/@telegram-apps/sdk/src/components/CloudStorage/CloudStorage.ts","../node_modules/@telegram-apps/sdk/src/components/CloudStorage/initCloudStorage.ts","../node_modules/@telegram-apps/sdk/src/components/HapticFeedback/HapticFeedback.ts","../node_modules/@telegram-apps/sdk/src/components/HapticFeedback/initHapticFeedback.ts","../node_modules/@telegram-apps/sdk/src/components/InitData/InitData.ts","../node_modules/@telegram-apps/sdk/src/components/InitData/initInitData.ts","../node_modules/@telegram-apps/sdk/src/components/InitData/parseInitData.ts","../node_modules/@telegram-apps/sdk/src/components/Invoice/Invoice.ts","../node_modules/@telegram-apps/sdk/src/components/Invoice/initInvoice.ts","../node_modules/@telegram-apps/sdk/src/components/MainButton/MainButton.ts","../node_modules/@telegram-apps/sdk/src/components/MainButton/initMainButton.ts","../node_modules/@telegram-apps/sdk/src/supports/createSupportsParamFn.ts","../node_modules/@telegram-apps/sdk/src/timeout/sleep.ts","../node_modules/@telegram-apps/sdk/src/components/MiniApp/MiniApp.ts","../node_modules/@telegram-apps/sdk/src/components/MiniApp/parsing/contact.ts","../node_modules/@telegram-apps/sdk/src/components/MiniApp/initMiniApp.ts","../node_modules/@telegram-apps/sdk/src/components/Popup/preparePopupParams.ts","../node_modules/@telegram-apps/sdk/src/components/Popup/Popup.ts","../node_modules/@telegram-apps/sdk/src/components/Popup/initPopup.ts","../node_modules/@telegram-apps/sdk/src/components/QRScanner/QRScanner.ts","../node_modules/@telegram-apps/sdk/src/components/QRScanner/initQRScanner.ts","../node_modules/@telegram-apps/sdk/src/components/SettingsButton/SettingsButton.ts","../node_modules/@telegram-apps/sdk/src/components/SettingsButton/initSettingsButton.ts","../node_modules/@telegram-apps/sdk/src/components/ThemeParams/parsing/parseThemeParams.ts","../node_modules/@telegram-apps/sdk/src/components/ThemeParams/ThemeParams.ts","../node_modules/@telegram-apps/sdk/src/components/ThemeParams/initThemeParams.ts","../node_modules/@telegram-apps/sdk/src/components/ThemeParams/requestThemeParams.ts","../node_modules/@telegram-apps/sdk/src/navigation/ensurePrefix.ts","../node_modules/@telegram-apps/sdk/src/navigation/createSafeURL.ts","../node_modules/@telegram-apps/sdk/src/components/Utils/Utils.ts","../node_modules/@telegram-apps/sdk/src/components/Utils/initUtils.ts","../node_modules/@telegram-apps/sdk/src/components/Viewport/requestViewport.ts","../node_modules/@telegram-apps/sdk/src/components/Viewport/Viewport.ts","../node_modules/@telegram-apps/sdk/src/components/Viewport/initViewport.ts","../node_modules/@telegram-apps/sdk/src/css-vars/setCSSVar.ts","../node_modules/@telegram-apps/sdk/src/css-vars/bindMiniAppCSSVars.ts","../node_modules/@telegram-apps/sdk/src/css-vars/bindThemeParamsCSSVars.ts","../node_modules/@telegram-apps/sdk/src/css-vars/bindViewportCSSVars.ts","../node_modules/@telegram-apps/sdk/src/env/initWeb.ts","../node_modules/@telegram-apps/sdk/src/env/isSSR.ts","../node_modules/@telegram-apps/sdk/src/env/isTMA.ts","../node_modules/@telegram-apps/sdk/src/env/mockTelegramEnv.ts","../node_modules/@telegram-apps/sdk/src/errors/isSDKError.ts","../node_modules/@telegram-apps/sdk/src/errors/isSDKErrorOfType.ts","../node_modules/@telegram-apps/sdk/src/navigation/BasicNavigator/prepareItem.ts","../node_modules/@telegram-apps/sdk/src/navigation/BasicNavigator/BasicNavigator.ts","../node_modules/@telegram-apps/sdk/src/navigation/BrowserNavigator/basicItemToBrowser.ts","../node_modules/@telegram-apps/sdk/src/navigation/urlToPath.ts","../node_modules/@telegram-apps/sdk/src/navigation/BrowserNavigator/prepareItem.ts","../node_modules/@telegram-apps/sdk/src/navigation/go.ts","../node_modules/@telegram-apps/sdk/src/navigation/getPathname.ts","../node_modules/@telegram-apps/sdk/src/navigation/BrowserNavigator/BrowserNavigator.ts","../node_modules/@telegram-apps/sdk/src/navigation/drop.ts","../node_modules/@telegram-apps/sdk/src/navigation/BrowserNavigator/createBrowserNavigatorFromLocation.ts","../node_modules/@telegram-apps/sdk/src/navigation/getHash.ts","../node_modules/@telegram-apps/sdk/src/navigation/initNavigator.ts"],"sourcesContent":["/**\n * Creates resettable singleton. We mostly need it for test purposes.\n * @param create - function which creates singleton entity.\n * @param onReset - function which will be called in case, singleton was reset.\n */\nexport function createSingleton<T>(\n  create: (reset: () => void) => T,\n  onReset?: (entity: T) => void,\n): [\n  /**\n   * Returns singleton entity.\n   */\n  get: () => T,\n  /**\n   * Resets last stored entity.\n   */\n  reset: () => void,\n] {\n  let cached: T | undefined;\n  const reset = () => {\n    cached !== undefined && onReset && onReset(cached);\n    cached = undefined;\n  };\n\n  return [() => (cached === undefined ? cached = create(reset) : cached), reset];\n}\n","import { miniAppsEventEmitter, resetMiniAppsEventEmitter } from '../event-emitter/singleton.js';\nimport type { MiniAppsSubscribeListener } from '../types.js';\n\n/**\n * Removes global event listener.\n * @param listener - event listener.\n */\nexport function unsubscribe(listener: MiniAppsSubscribeListener): void {\n  const ee = miniAppsEventEmitter();\n  const { count } = ee;\n  ee.unsubscribe(listener);\n\n  // If event emitter now has no listeners, we can make a cleanup.\n  if (count && !ee.count) {\n    resetMiniAppsEventEmitter();\n  }\n}\n","import type { RemoveEventListenerFn } from '@/events/types.js';\n\nimport { miniAppsEventEmitter } from '../event-emitter/singleton.js';\nimport { unsubscribe } from '../listening/unsubscribe.js';\nimport type { MiniAppsSubscribeListener } from '../types.js';\n\n/**\n * Subscribes to all events sent from the native Telegram application.\n * @param listener - event listener to bind.\n * @returns Function to remove bound event listener.\n */\nexport function subscribe(listener: MiniAppsSubscribeListener): RemoveEventListenerFn {\n  miniAppsEventEmitter().subscribe(listener);\n  return () => unsubscribe(listener);\n}\n","import { subscribe } from '@/bridge/events/listening/subscribe.js';\nimport { unsubscribe } from '@/bridge/events/listening/unsubscribe.js';\nimport { Logger } from '@/logger/Logger.js';\nimport type { MiniAppsSubscribeListener } from '@/bridge/events/types.js';\n\nexport const logger = new Logger('SDK', {\n  bgColor: 'forestgreen',\n  textColor: 'white',\n});\n\nlet debugEnabled = false;\n\nconst onEvent: MiniAppsSubscribeListener = ({ name, payload }) => {\n  logger.log('Event received:', payload ? { name, payload } : { name });\n};\n\n/**\n * Sets new debug mode. Enabling debug mode leads to printing additional messages in the console,\n * related to the processes inside the package.\n * @param enable - should debug be enabled.\n */\nexport function setDebug(enable: boolean): void {\n  if (debugEnabled !== enable) {\n    debugEnabled = enable;\n    enable ? subscribe(onEvent) : unsubscribe(onEvent);\n  }\n}\n\n/**\n * Logs info message into the console.\n * @param args - additional arguments.\n */\nexport function log(...args: any[]): void {\n  if (debugEnabled) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    logger.log(...args);\n  }\n}\n","/**\n * Message log level.\n */\nexport type LogLevel = 'log' | 'error';\n\nexport interface LoggerOptions {\n  bgColor?: string;\n  textColor?: string;\n}\n\nexport class Logger implements Pick<Console, 'log' | 'error'> {\n  constructor(\n    private readonly scope: string,\n    private readonly options: LoggerOptions = {},\n  ) {\n  }\n\n  /**\n   * Prints message into a console in case, logger is currently enabled.\n   * @param level - log level.\n   * @param args - arguments.\n   */\n  private print(level: LogLevel, ...args: any[]): void {\n    const now = new Date();\n    const date = Intl\n      .DateTimeFormat('en-GB', {\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        fractionalSecondDigits: 3,\n        timeZone: 'UTC',\n      })\n      .format(now);\n\n    const { textColor, bgColor } = this.options;\n    const commonCss = 'font-weight: bold;padding: 0 5px;border-radius:5px';\n\n    console[level](\n      `%c${date}%c / %c${this.scope}`,\n      `${commonCss};background-color: lightblue;color:black`,\n      '',\n      `${commonCss};${textColor ? `color:${textColor};` : ''}${bgColor ? `background-color:${bgColor}` : ''}`,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      ...args,\n    );\n  }\n\n  /**\n   * Prints error message into a console.\n   * @param args\n   */\n  error(...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    this.print('error', ...args);\n  }\n\n  /**\n   * Prints log message into a console.\n   * @param args\n   */\n  log(...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    this.print('log', ...args);\n  }\n}\n","import type { RemoveEventListenerFn } from '../types.js';\nimport type {\n  EmptyEventName,\n  EventListener,\n  EventName,\n  EventParams,\n  NonEmptyEventName,\n  SubscribeListener,\n} from './types.js';\n\nexport class EventEmitter<Schema> {\n  private readonly listeners: Map<\n    string,\n    [listener: EventListener<any>, once?: boolean][]\n  > = new Map();\n\n  private listenersCount = 0;\n\n  private subscribeListeners: SubscribeListener<Schema>[] = [];\n\n  /**\n   * Removes all event listeners.\n   */\n  clear() {\n    this.listeners.clear();\n    this.subscribeListeners = [];\n  }\n\n  /**\n   * Returns count of bound listeners.\n   */\n  get count(): number {\n    return this.listenersCount + this.subscribeListeners.length;\n  }\n\n  /**\n   * Emits known event which has no parameters.\n   * @param event - event name.\n   */\n  emit<E extends EmptyEventName<Schema>>(event: E): void;\n\n  /**\n   * Emits known event which has parameters.\n   * @param event - event name.\n   * @param args - list of event listener arguments.\n   */\n  emit<E extends NonEmptyEventName<Schema>>(event: E, ...args: EventParams<Schema[E]>): void;\n\n  emit(event: EventName<Schema>, ...args: any[]): void {\n    this.subscribeListeners.forEach((l) => l({\n      event,\n      args: args as EventParams<Schema[EventName<Schema>]>,\n    }));\n\n    const listeners = this.listeners.get(event) || [];\n\n    listeners.forEach(([listener, once]) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      listener(...args);\n      if (once) {\n        this.off(event, listener);\n      }\n    });\n  }\n\n  /**\n   * Adds new event listener.\n   * @param event - event name.\n   * @param listener - event listener.\n   * @param once - should listener be called only once.\n   * @returns Function to remove bound event listener.\n   */\n  on<E extends EventName<Schema>>(\n    event: E,\n    listener: EventListener<Schema[E]>,\n    once?: boolean,\n  ): RemoveEventListenerFn {\n    let listeners = this.listeners.get(event);\n    if (!listeners) {\n      this.listeners.set(event, listeners = []);\n    }\n\n    listeners.push([listener, once]);\n    this.listenersCount += 1;\n\n    return () => this.off(event, listener);\n  }\n\n  /**\n   * Removes event listener. In case, specified listener was bound several times, it removes\n   * only a single one.\n   * @param event - event name.\n   * @param listener - event listener.\n   */\n  off<E extends EventName<Schema>>(event: E, listener: EventListener<Schema[E]>): void {\n    const listeners = this.listeners.get(event) || [];\n    for (let i = 0; i < listeners.length; i += 1) {\n      if (listener === listeners[i][0]) {\n        listeners.splice(i, 1);\n        this.listenersCount -= 1;\n        return;\n      }\n    }\n  }\n\n  /**\n   * Adds a new event listener for all events.\n   * @param listener - event listener.\n   * @returns Function to remove event listener.\n   */\n  subscribe(listener: SubscribeListener<Schema>): RemoveEventListenerFn {\n    this.subscribeListeners.push(listener);\n    return () => this.unsubscribe(listener);\n  }\n\n  /**\n   * Removes global event listener. In case, specified listener was bound several times, it removes\n   * only a single one.\n   * @param listener - event listener.\n   */\n  unsubscribe(listener: SubscribeListener<Schema>): void {\n    for (let i = 0; i < this.subscribeListeners.length; i += 1) {\n      if (this.subscribeListeners[i] === listener) {\n        this.subscribeListeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n}\n","import type { RemoveEventListenerFn } from './types.js';\n\n/**\n * Adds new event listener using window.addEventListener.\n * @param type - event name.\n * @param listener - event listener.\n * @param options - listening options.\n * @returns Function to remove event listener.\n */\nexport function onWindow<K extends keyof WindowEventMap>(\n  type: K,\n  listener: (this: Window, ev: WindowEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions,\n): RemoveEventListenerFn {\n  window.addEventListener(type, listener, options);\n  return () => window.removeEventListener(type, listener, options);\n}\n","import { CleanupFn } from '@/types/index.js';\n\n/**\n * Returns a tuple, containing function to add cleanup, call cleanup, and flag showing whether\n * cleanup was called. Cleanup will not be performed in case, it was done before.\n */\nexport function createCleanup(...fns: (CleanupFn | CleanupFn[])[]): [\n  add: (fn: CleanupFn) => void,\n  cleanup: () => void,\n  cleanedUp: boolean,\n] {\n  let cleanedUp = false;\n  const cache = fns.flat(1);\n\n  return [\n    (fn) => !cleanedUp && cache.push(fn),\n    () => {\n      if (!cleanedUp) {\n        cleanedUp = true;\n        cache.forEach(clean => clean());\n      }\n    },\n    cleanedUp,\n  ];\n}","import type { ErrorType } from './errors.js';\n\n/**\n * Error used across the SDK.\n */\nexport class SDKError extends Error {\n  constructor(public readonly type: ErrorType, message?: string, cause?: unknown) {\n    super(message, { cause });\n    Object.setPrototypeOf(this, SDKError.prototype);\n  }\n}\n","import { SDKError } from './SDKError.js';\nimport type { ErrorType } from './errors.js';\n\n/**\n * Creates new error using specified type and message.\n * @param type - error code.\n * @param message - error message.\n * @param cause - original error.\n */\nexport function createError(type: ErrorType, message: string, cause?: unknown): SDKError {\n  return new SDKError(type, message, cause);\n}\n","/**\n * Specified Mini Apps method is unsupported.\n */\nexport const ERR_METHOD_UNSUPPORTED = 'ERR_METHOD_UNSUPPORTED';\n\n/**\n * Specified Mini Apps method parameter is unsupported.\n */\nexport const ERR_METHOD_PARAMETER_UNSUPPORTED = 'ERR_METHOD_PARAMETER_UNSUPPORTED';\n\n/**\n * Current environment is not Telegram application.\n */\nexport const ERR_UNKNOWN_ENV = 'ERR_UNKNOWN_ENV';\n\n/**\n * Telegram application returned and error while invoking custom method.\n */\nexport const ERR_INVOKE_CUSTOM_METHOD_RESPONSE = 'ERR_INVOKE_CUSTOM_METHOD_RESPONSE';\n\n/**\n * Timeout reached.\n */\nexport const ERR_TIMED_OUT = 'ERR_TIMED_OUT';\n\n/**\n * Value has unexpected type.\n */\nexport const ERR_UNEXPECTED_TYPE = 'ERR_UNEXPECTED_TYPE';\n\n/**\n * Something went wrong during value parsing.\n */\nexport const ERR_PARSE = 'ERR_PARSE';\n\n/**\n * Navigation entries list is empty.\n */\nexport const ERR_NAVIGATION_HISTORY_EMPTY = 'ERR_NAVIGATION_LIST_EMPTY';\n\n/**\n * Navigation entries cursor is invalid.\n */\nexport const ERR_NAVIGATION_INDEX_INVALID = 'ERR_NAVIGATION_CURSOR_INVALID';\n\n/**\n * Navigation entries item is invalid.\n */\nexport const ERR_NAVIGATION_ITEM_INVALID = 'ERR_NAVIGATION_ITEM_INVALID';\n\n/**\n * SSR component initialization failed.\n */\nexport const ERR_SSR_INIT = 'ERR_SSR_INIT';\n\n/**\n * Path starts from the invalid base.\n */\nexport const ERR_INVALID_PATH_BASE = 'ERR_INVALID_PATH_BASE';\n\nexport type ErrorType =\n  | typeof ERR_METHOD_UNSUPPORTED\n  | typeof ERR_METHOD_PARAMETER_UNSUPPORTED\n  | typeof ERR_UNKNOWN_ENV\n  | typeof ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n  | typeof ERR_TIMED_OUT\n  | typeof ERR_PARSE\n  | typeof ERR_UNEXPECTED_TYPE\n  | typeof ERR_NAVIGATION_HISTORY_EMPTY\n  | typeof ERR_NAVIGATION_INDEX_INVALID\n  | typeof ERR_NAVIGATION_ITEM_INVALID\n  | typeof ERR_SSR_INIT\n  | typeof ERR_INVALID_PATH_BASE;\n","import { createError } from '@/errors/createError.js';\nimport { ERR_UNEXPECTED_TYPE } from '@/errors/errors.js';\nimport type { SDKError } from '@/errors/SDKError.js';\n\n/**\n * Creates instance of TypeError stating, that value has unexpected type.\n */\nexport function createTypeError(): SDKError {\n  return createError(ERR_UNEXPECTED_TYPE, 'Value has unexpected type');\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_PARSE } from '@/errors/errors.js';\n\nimport type { Parser } from '../types.js';\nimport type { ValueParserOptionalResult, ValueParserParseResult } from './types.js';\n\nexport class ValueParser<ResultType, IsOptional extends boolean> {\n  constructor(\n    protected parser: Parser<ResultType>,\n    protected isOptional: IsOptional,\n    protected type?: string,\n  ) {\n  }\n\n  /**\n   * Attempts to parse passed value\n   * @param value - value to parse.\n   * @throws {SDKError} ERR_PARSE\n   * @see ERR_PARSE\n   */\n  parse(value: unknown): ValueParserParseResult<ResultType, IsOptional> {\n    // In case, parsing result is specified as optional, and passed value is considered as empty,\n    // we can return undefined. Otherwise, pass to parser.\n    if (this.isOptional && value === undefined) {\n      return undefined as ValueParserParseResult<ResultType, IsOptional>;\n    }\n\n    try {\n      return this.parser(value) as ValueParserParseResult<ResultType, IsOptional>;\n    } catch (cause) {\n      throw createError(\n        ERR_PARSE,\n        `Unable to parse value${this.type ? ` as ${this.type}` : ''}`,\n        cause,\n      );\n    }\n  }\n\n  optional(): ValueParserOptionalResult<this, ResultType> {\n    this.isOptional = true as IsOptional;\n    return this as ValueParserOptionalResult<this, ResultType>;\n  }\n}\n","import { ValueParser } from './ValueParser/ValueParser.js';\nimport type { Parser } from './types.js';\n\nexport type ValueParserGenerator<T> = () => ValueParser<T, false>;\n\n/**\n * Creates function which generates new scalar value parser based on the specified one.\n * @param parser - parser to use as basic.\n * @param type - type name.\n */\nexport function createValueParserGenerator<T>(\n  parser: Parser<T>,\n  type?: string,\n): ValueParserGenerator<T> {\n  return () => new ValueParser(parser, false, type);\n}\n","import { createTypeError } from '../createTypeError.js';\nimport { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as boolean.\n */\nexport const boolean: ValueParserGenerator<boolean> = createValueParserGenerator((value) => {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n  const asString = String(value);\n\n  if (asString === '1' || asString === 'true') {\n    return true;\n  }\n\n  if (asString === '0' || asString === 'false') {\n    return false;\n  }\n\n  throw createTypeError();\n}, 'boolean');\n","import { createError } from '@/errors/createError.js';\nimport { ERR_PARSE } from '@/errors/errors.js';\n\nimport type { Parser, Schema } from './types.js';\n\n/**\n * Parses external value by specified schema. Functions iterates over each schema field\n * and uses getField function to get its value from the external source.\n * @param schema - object schema.\n * @param getField - function which gets external value by its field name.\n */\nexport function parseBySchema<T>(\n  schema: Schema<T>,\n  getField: (field: string) => unknown,\n): T {\n  const result = {} as T;\n\n  for (const field in schema) {\n    const definition = schema[field];\n    if (!definition) {\n      continue;\n    }\n\n    let from: string;\n    let parser: Parser<any>;\n\n    // In case, definition has \"type\" property, then SchemaFieldDetailed was passed.\n    if (typeof definition === 'function' || 'parse' in definition) {\n      // Otherwise we are working with either parser function or instance.\n      from = field;\n      parser = typeof definition === 'function' ? definition : definition.parse.bind(definition);\n    } else {\n      const { type: definitionType } = definition;\n\n      from = definition.from || field;\n      parser = typeof definitionType === 'function'\n        ? definitionType\n        : definitionType.parse.bind(definitionType);\n    }\n\n    try {\n      const parsedValue = parser(getField(from));\n      if (parsedValue !== undefined) {\n        (result as any)[field] = parsedValue;\n      }\n    } catch (error) {\n      throw createError(ERR_PARSE, `Unable to parse field \"${field}\"`, error);\n    }\n  }\n\n  return result;\n}\n","import { createTypeError } from './createTypeError.js';\n\n/**\n * Converts value to record.\n * @param value - value to convert.\n * @throws {Error} Value passed as a string does not represent JSON object.\n * @throws {Error} Value is not convertable.\n */\nexport function toRecord(value: unknown): Record<string, unknown> {\n  let formattedValue: any = value;\n\n  // Convert value to JSON in case, it is string. We expect value to be JSON string.\n  if (typeof formattedValue === 'string') {\n    formattedValue = JSON.parse(formattedValue);\n  }\n\n  // We expect json to be usual object.\n  if (\n    typeof formattedValue !== 'object'\n    || formattedValue === null\n    || Array.isArray(formattedValue)\n  ) {\n    throw createTypeError();\n  }\n\n  return formattedValue as Record<string, unknown>;\n}\n","import { parseBySchema } from '../parseBySchema.js';\nimport { toRecord } from '../toRecord.js';\nimport { ValueParser } from '../ValueParser/ValueParser.js';\nimport type { Schema } from '../types.js';\n\n/**\n * Creates new Json parser according to passed schema.\n * @param schema - object schema.\n * @param type - parser type name.\n */\nexport function json<T>(schema: Schema<T>, type?: string): ValueParser<T, false> {\n  return new ValueParser((value) => {\n    const record = toRecord(value);\n    return parseBySchema(schema, (field) => record[field]);\n  }, false, type);\n}\n","import { createTypeError } from '../createTypeError.js';\nimport { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as number.\n */\nexport const number: ValueParserGenerator<number> = createValueParserGenerator((value) => {\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    const num = Number(value);\n\n    if (!Number.isNaN(num)) {\n      return num;\n    }\n  }\n\n  throw createTypeError();\n}, 'number');\n","import { createTypeError } from '../createTypeError.js';\nimport { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as string.\n */\nexport const string: ValueParserGenerator<string> = createValueParserGenerator((value) => {\n  if (typeof value === 'string' || typeof value === 'number') {\n    return value.toString();\n  }\n  throw createTypeError();\n}, 'string');\n","import { json } from '@/parsing/parsers/json.js';\nimport { string } from '@/parsing/parsers/string.js';\n\n/**\n * Message format used in communication between client and Telegram applications.\n */\nexport interface MiniAppsMessage {\n  /**\n   * Event name.\n   */\n  eventType: string;\n  /**\n   * Event parameters.\n   */\n  eventData?: unknown;\n}\n\n/**\n * Parses value as a message between client and Telegram applications.\n * @param value - value to parse.\n */\nexport function parseMessage(value: unknown): MiniAppsMessage {\n  return json({\n    eventType: string(),\n    eventData: (v) => v,\n  }).parse(value);\n}\n","/**\n * Removes global event handlers, used by the package.\n */\nexport function cleanupEventHandlers(): void {\n  ['TelegramGameProxy_receiveEvent', 'TelegramGameProxy', 'Telegram'].forEach((prop) => {\n    delete window[prop as keyof Window];\n  });\n}\n","/**\n * Emits event sent from Telegram native application like it was sent in\n * default web environment between 2 iframes. It dispatches new MessageEvent\n * and expects it to be handled via `window.addEventListener('message', ...)`\n * as developer would do it to handle messages sent from the parent iframe.\n * @param eventType - event name.\n * @param eventData - event payload.\n */\nexport function emitMiniAppsEvent(eventType: string, eventData: unknown): void {\n  window.dispatchEvent(new MessageEvent('message', {\n    data: JSON.stringify({ eventType, eventData }),\n    // We specify window.parent to imitate the case, the parent iframe sent us this event.\n    source: window.parent,\n  }));\n}\n","import { logger } from '@/debug/debug.js';\nimport { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport { onWindow } from '@/events/onWindow.js';\nimport { createCleanup } from '@/misc/createCleanup.js';\nimport { boolean } from '@/parsing/parsers/boolean.js';\nimport { json } from '@/parsing/parsers/json.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { string } from '@/parsing/parsers/string.js';\n\nimport { type MiniAppsMessage, parseMessage } from '../../parseMessage.js';\nimport { cleanupEventHandlers } from '../event-handlers/cleanupEventHandlers.js';\nimport { defineEventHandlers } from '../event-handlers/defineEventHandlers.js';\nimport type {\n  MiniAppsEventName,\n  MiniAppsEventPayload,\n  MiniAppsEventEmitter,\n  MiniAppsEvents,\n} from '../types.js';\n\n/**\n * Parsers for problematic Mini Apps events.\n */\nconst parsers: {\n  [E in MiniAppsEventName]?: {\n    parse(value: unknown): MiniAppsEventPayload<E>;\n  }\n} = {\n  clipboard_text_received: json({\n    req_id: string(),\n    data: (value) => (value === null ? value : string().optional().parse(value)),\n  }),\n  custom_method_invoked: json({\n    req_id: string(),\n    result: (value) => value,\n    error: string().optional(),\n  }),\n  popup_closed: {\n    parse(value) {\n      return json({\n        button_id: (value) => (\n          value === null || value === undefined\n            ? undefined\n            : string().parse(value)\n        ),\n      }).parse(value ?? {});\n    },\n  },\n  viewport_changed: json({\n    height: number(),\n    width: (value) => (\n      value === null || value === undefined\n        ? window.innerWidth\n        : number().parse(value)\n    ),\n    is_state_stable: boolean(),\n    is_expanded: boolean(),\n  }),\n};\n\n/**\n * Creates new event emitter, which handles events from the Telegram application.\n */\nexport function createMiniAppsEventEmitter(): [\n  /**\n   * Created event emitter.\n   */\n  emitter: MiniAppsEventEmitter,\n  /**\n   * Function to dispose created emitter.\n   */\n  dispose: () => void,\n] {\n  // We use this event emitter for better developer experience, using the subscribe method.\n  const subEmitter = new EventEmitter<{ event: any[] }>();\n\n  // Event emitter processing all the incoming events.\n  const mainEmitter = new EventEmitter<MiniAppsEvents>();\n\n  mainEmitter.subscribe(event => {\n    subEmitter.emit('event', { name: event.event, payload: event.args[0] });\n  });\n\n  // Define event handles, which will proxy native method calls to their web version.\n  defineEventHandlers();\n\n  // List of cleanup functions, which should be called on dispose.\n  const [, cleanup] = createCleanup(\n    // Don't forget to remove created handlers.\n    cleanupEventHandlers,\n    // Add \"resize\" event listener to make sure, we always have fresh viewport information.\n    // Desktop version of Telegram is sometimes not sending the viewport_changed\n    // event. For example, when the MainButton is shown. That's why we should\n    // add our own listener to make sure, viewport information is always fresh.\n    // Issue: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/10\n    onWindow('resize', () => {\n      mainEmitter.emit('viewport_changed', {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        is_state_stable: true,\n        is_expanded: true,\n      });\n    }),\n    // Add listener, which handles events sent from the Telegram web application and also events\n    // generated by the local emitEvent function.\n    onWindow('message', (event) => {\n      // Ignore non-parent window messages.\n      if (event.source !== window.parent) {\n        return;\n      }\n\n      // Parse incoming event data.\n      let message: MiniAppsMessage;\n      try {\n        message = parseMessage(event.data);\n      } catch {\n        // We ignore incorrect messages as they could be generated by any other code.\n        return;\n      }\n\n      const { eventType, eventData } = message;\n      const parser = parsers[eventType as keyof typeof parsers];\n\n      try {\n        const data = parser ? parser.parse(eventData) : eventData;\n        mainEmitter.emit(...(data ? [eventType, data] : [eventType]) as [any, any]);\n      } catch (cause) {\n        logger.error(\n          `An error occurred processing the \"${eventType}\" event from the Telegram application.\\nPlease, file an issue here:\\nhttps://github.com/Telegram-Mini-Apps/telegram-apps/issues/new/choose`,\n          message,\n          cause,\n        );\n      }\n    }),\n    // Clear emitters.\n    () => subEmitter.clear(),\n    () => mainEmitter.clear(),\n  );\n\n  return [{\n    on: mainEmitter.on.bind(mainEmitter),\n    off: mainEmitter.off.bind(mainEmitter),\n    subscribe(listener) {\n      return subEmitter.on('event', listener);\n    },\n    unsubscribe(listener) {\n      subEmitter.off('event', listener);\n    },\n    get count() {\n      return mainEmitter.count + subEmitter.count;\n    },\n  }, cleanup];\n}\n","import { emitMiniAppsEvent } from './emitMiniAppsEvent.js';\n\n/**\n * Defines special handlers by known paths, which are recognized by\n * Telegram as ports to receive events. This function also sets special\n * function in global window object to prevent duplicate declaration.\n */\nexport function defineEventHandlers() {\n  // Iterate over each path, where \"receiveEvent\" function should be\n  // defined. This function is called by external environment in case,\n  // it wants to emit some event.\n  [\n    ['TelegramGameProxy_receiveEvent'], // Windows Phone.\n    ['TelegramGameProxy', 'receiveEvent'], // Desktop.\n    ['Telegram', 'WebView', 'receiveEvent'], // Android and iOS.\n  ].forEach((path) => {\n    // Path starts from the \"window\" object.\n    let pointer = window as any;\n\n    path.forEach((item, idx, arr) => {\n      // We are on the last iteration, where function property name is passed.\n      if (idx === arr.length - 1) {\n        pointer[item] = emitMiniAppsEvent;\n        return;\n      }\n\n      if (!(item in pointer)) {\n        pointer[item] = {};\n      }\n      pointer = pointer[item];\n    });\n  });\n}\n","import { createSingleton } from '@/misc/createSingleton.js';\n\nimport { createMiniAppsEventEmitter } from './createMiniAppsEventEmitter.js';\nimport type { MiniAppsEventEmitter } from '../types.js';\n\nconst [get, resetMiniAppsEventEmitter] = createSingleton(\n  (reset) => {\n    const [emitter, cleanup] = createMiniAppsEventEmitter();\n\n    // Rewire \"off\" method and make it reset singleton if no event listeners left.\n    const off = emitter.off.bind(emitter);\n    emitter.off = (event, listener) => {\n      const { count } = emitter;\n      off(event, listener);\n\n      // If event emitter now has no listeners, we can perform a reset.\n      if (count && !emitter.count) {\n        reset();\n      }\n    };\n\n    return [emitter, cleanup] as const;\n  },\n  ([, cleanup]) => cleanup(),\n);\n\n/**\n * Returns Mini Apps event emitter singleton.\n */\nexport function miniAppsEventEmitter(): MiniAppsEventEmitter {\n  return get()[0];\n}\n\nexport { resetMiniAppsEventEmitter };\n","import { miniAppsEventEmitter } from '../event-emitter/singleton.js';\nimport type { MiniAppsEventListener, MiniAppsEventName } from '../types.js';\n\n/**\n * Removes listener from specified event.\n * @param event - event to listen.\n * @param listener - event listener to remove.\n */\nexport function off<E extends MiniAppsEventName>(\n  event: E,\n  listener: MiniAppsEventListener<E>,\n): void {\n  miniAppsEventEmitter().off(event, listener);\n}\n","import type { RemoveEventListenerFn } from '@/events/types.js';\n\nimport { miniAppsEventEmitter } from '../event-emitter/singleton.js';\nimport type { MiniAppsEventListener, MiniAppsEventName } from '../types.js';\n\n/**\n * Adds new listener to the specified event. Returns handler\n * which allows to stop listening to event.\n * @param event - event name.\n * @param listener - event listener.\n * @param once - should listener be called only once.\n * @returns Function to remove bound event listener.\n */\nexport function on<E extends MiniAppsEventName>(\n  event: E,\n  listener: MiniAppsEventListener<E>,\n  once?: boolean,\n): RemoveEventListenerFn {\n  return miniAppsEventEmitter().on(event, listener, once);\n}\n","/**\n * States that passed value is Record and not Array.\n * @param value - value to check.\n */\nexport function isRecord(value: unknown): value is Record<string, unknown> {\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n","import type { Version } from './types.js';\n\n/**\n * Returns 1 in case, version \"a\" is greater than \"b\".\n * Returns 0 in case, version \"a\" equal to \"b\".\n * Returns -1 in case, version \"a\" is lower than \"b\".\n * @param a - first version.\n * @param b - second version.\n */\nexport function compareVersions(a: Version, b: Version): number {\n  // Split both of the version by dot.\n  const aParts = a.split('.');\n  const bParts = b.split('.');\n\n  // Compute maximum length.\n  const len = Math.max(aParts.length, bParts.length);\n\n  // Iterate over each part of version and compare them. In case, part is\n  // missing, assume its value is equal to 0.\n  for (let i = 0; i < len; i += 1) {\n    const aVal = parseInt(aParts[i] || '0', 10);\n    const bVal = parseInt(bParts[i] || '0', 10);\n\n    if (aVal === bVal) {\n      continue;\n    }\n    return aVal > bVal ? 1 : -1;\n  }\n  return 0;\n}\n","import { compareVersions } from '@/version/compareVersions.js';\nimport type {\n  MiniAppsMethodName,\n  MiniAppsMethodVersionedParams,\n  MiniAppsMethodWithVersionedParams,\n} from '@/bridge/methods/types/methods.js';\nimport type { Version } from '@/version/types.js';\n\n/**\n * Returns true if \"a\" version is less than or equal to \"b\" version.\n * @param a\n * @param b\n */\nfunction versionLessOrEqual(a: Version, b: Version): boolean {\n  return compareVersions(a, b) <= 0;\n}\n\n/**\n * Returns true in case, passed parameter in specified method is supported.\n * @param method - method name\n * @param param - method parameter\n * @param inVersion - platform version.\n */\nexport function supports<M extends MiniAppsMethodWithVersionedParams>(\n  method: M,\n  param: MiniAppsMethodVersionedParams<M>,\n  inVersion: Version,\n): boolean;\n\n/**\n * Returns true in case, specified method is supported in passed version.\n * @param method - method name.\n * @param inVersion - platform version.\n */\nexport function supports(method: MiniAppsMethodName, inVersion: Version): boolean;\n\nexport function supports(\n  method: MiniAppsMethodName,\n  paramOrVersion: Version | string,\n  inVersion?: string,\n): boolean {\n  // Method name, parameter, target version.\n  if (typeof inVersion === 'string') {\n    if (method === 'web_app_open_link') {\n      if (paramOrVersion === 'try_instant_view') {\n        return versionLessOrEqual('6.4', inVersion);\n      }\n      if (paramOrVersion === 'try_browser') {\n        return versionLessOrEqual('7.6', inVersion);\n      }\n    }\n\n    if (method === 'web_app_set_header_color') {\n      if (paramOrVersion === 'color') {\n        return versionLessOrEqual('6.9', inVersion);\n      }\n    }\n\n    if (method === 'web_app_close' && paramOrVersion === 'return_back') {\n      return versionLessOrEqual('7.6', inVersion);\n    }\n  }\n\n  switch (method) {\n    case 'web_app_open_tg_link':\n    case 'web_app_open_invoice':\n    case 'web_app_setup_back_button':\n    case 'web_app_set_background_color':\n    case 'web_app_set_header_color':\n    case 'web_app_trigger_haptic_feedback':\n      return versionLessOrEqual('6.1', paramOrVersion);\n    case 'web_app_open_popup':\n      return versionLessOrEqual('6.2', paramOrVersion);\n    case 'web_app_close_scan_qr_popup':\n    case 'web_app_open_scan_qr_popup':\n    case 'web_app_read_text_from_clipboard':\n      return versionLessOrEqual('6.4', paramOrVersion);\n    case 'web_app_switch_inline_query':\n      return versionLessOrEqual('6.7', paramOrVersion);\n    case 'web_app_invoke_custom_method':\n    case 'web_app_request_write_access':\n    case 'web_app_request_phone':\n      return versionLessOrEqual('6.9', paramOrVersion);\n    case 'web_app_setup_settings_button':\n      return versionLessOrEqual('6.10', paramOrVersion);\n    case 'web_app_biometry_get_info':\n    case 'web_app_biometry_open_settings':\n    case 'web_app_biometry_request_access':\n    case 'web_app_biometry_request_auth':\n    case 'web_app_biometry_update_token':\n      return versionLessOrEqual('7.2', paramOrVersion);\n    default:\n      return [\n        'iframe_ready',\n        'iframe_will_reload',\n        'web_app_close',\n        'web_app_data_send',\n        'web_app_expand',\n        'web_app_open_link',\n        'web_app_ready',\n        'web_app_request_theme',\n        'web_app_request_viewport',\n        'web_app_setup_main_button',\n        'web_app_setup_closing_behavior',\n      ].includes(method);\n  }\n}\n","import { isRecord } from '@/misc/isRecord.js';\n\n/**\n * Returns true in case, passed value contains path `external.notify` property and `notify` is a\n * function.\n * @param value - value to check.\n */\nexport function hasExternalNotify<T extends object>(value: T): value is (\n  T & {\n  external: {\n    notify: (...args: any) => any;\n  };\n}) {\n  return 'external' in value\n    && isRecord(value.external)\n    && 'notify' in value.external\n    && typeof value.external.notify === 'function';\n}\n","import { isRecord } from '@/misc/isRecord.js';\n\n/**\n * Returns true in case, passed value contains path `TelegramWebviewProxy.postEvent` property and\n * `postEvent` is a function.\n * @param value - value to check.\n */\nexport function hasWebviewProxy<T extends {}>(value: T): value is (\n  T & {\n  TelegramWebviewProxy: {\n    postEvent: (...args: unknown[]) => unknown;\n  }\n}) {\n  return 'TelegramWebviewProxy' in value\n    && isRecord(value.TelegramWebviewProxy)\n    && 'postEvent' in value.TelegramWebviewProxy\n    && typeof value.TelegramWebviewProxy.postEvent === 'function';\n}\n","/**\n * @see https://stackoverflow.com/a/326076\n * @returns True, if current environment is iframe.\n */\nexport function isIframe(): boolean {\n  try {\n    return window.self !== window.top;\n  } catch {\n    return true;\n  }\n}\n","const INITIAL_TARGET_ORIGIN = 'https://web.telegram.org'\n\nlet currentTargetOrigin = INITIAL_TARGET_ORIGIN;\n\n/**\n * Sets a new global targetOrigin, used by the `postEvent` method.\n * The default value is \"https://web.telegram.org\".\n * You don't need to use this method until you know what you are doing.\n *\n * This method could be used for test purposes.\n * @param value - new target origin.\n * @see postEvent\n */\nexport function setTargetOrigin(value: string): void {\n  currentTargetOrigin = value;\n}\n\n/**\n * Sets the initial target origin.\n */\nexport function resetTargetOrigin(): void {\n  setTargetOrigin(INITIAL_TARGET_ORIGIN);\n}\n\n/**\n * Returns current global target origin.\n */\nexport function targetOrigin(): string {\n  return currentTargetOrigin;\n}\n","import { log } from '@/debug/debug.js';\nimport { hasExternalNotify } from '@/env/hasExternalNotify.js';\nimport { hasWebviewProxy } from '@/env/hasWebviewProxy.js';\nimport { isIframe } from '@/env/isIframe.js';\nimport { createError } from '@/errors/createError.js';\nimport { ERR_UNKNOWN_ENV } from '@/errors/errors.js';\n\nimport { targetOrigin as targetOriginFn } from '../target-origin.js';\nimport type {\n  MiniAppsMethodName,\n  MiniAppsMethodParams,\n  MiniAppsMethodWithOptionalParams,\n  MiniAppsMethodWithoutParams,\n  MiniAppsMethodWithRequiredParams,\n} from './types/methods.js';\n\ninterface PostEventOptions {\n  /**\n   * Origin used while posting a message.\n   *\n   * This option is only used if the current environment is browser (Web version of Telegram)\n   * and could be used for test purposes.\n   * @default 'https://web.telegram.org'\n   */\n  targetOrigin?: string;\n}\n\nexport type PostEvent = typeof postEvent;\n\n/**\n * Calls Mini Apps method with optional parameters.\n * @param method - method name.\n * @param params - method parameters.\n * @param options - posting options.\n * @throws {SDKError} ERR_UNKNOWN_ENV\n * @see ERR_UNKNOWN_ENV\n */\nexport function postEvent<Method extends MiniAppsMethodWithOptionalParams>(\n  method: Method,\n  params?: MiniAppsMethodParams<Method>,\n  options?: PostEventOptions,\n): void;\n\n/**\n * Calls Mini Apps method without parameters.\n * @param method - method name.\n * @param options - posting options.\n * @throws {SDKError} ERR_UNKNOWN_ENV\n * @see ERR_UNKNOWN_ENV\n */\nexport function postEvent(\n  method: MiniAppsMethodWithoutParams | MiniAppsMethodWithOptionalParams,\n  options?: PostEventOptions,\n): void;\n\n/**\n * Calls Mini Apps method with parameters.\n * @param method - method name.\n * @param params - method parameters.\n * @param options - posting options.\n * @throws {SDKError} ERR_UNKNOWN_ENV\n * @see ERR_UNKNOWN_ENV\n */\nexport function postEvent<Method extends MiniAppsMethodWithRequiredParams>(\n  method: Method,\n  params: MiniAppsMethodParams<Method>,\n  options?: PostEventOptions,\n): void;\n\nexport function postEvent(\n  eventType: MiniAppsMethodName,\n  paramsOrOptions?: MiniAppsMethodParams<MiniAppsMethodName> | PostEventOptions,\n  options?: PostEventOptions,\n): void {\n  let postOptions: PostEventOptions = {};\n  let eventData: any;\n\n  if (!paramsOrOptions && !options) {\n    // Parameters and options were not passed.\n    postOptions = {};\n  } else if (paramsOrOptions && options) {\n    // Both parameters and options passed.\n    postOptions = options;\n    eventData = paramsOrOptions;\n  } else if (paramsOrOptions) {\n    // Only parameters were passed.\n    if ('targetOrigin' in paramsOrOptions) {\n      postOptions = paramsOrOptions;\n    } else {\n      eventData = paramsOrOptions;\n    }\n  }\n\n  log('Posting event:', eventData\n    ? { event: eventType, data: eventData }\n    : { event: eventType });\n\n  // Telegram Web.\n  if (isIframe()) {\n    return window.parent.postMessage(\n      JSON.stringify({ eventType, eventData }),\n      postOptions.targetOrigin || targetOriginFn(),\n    );\n  }\n\n  // Telegram for Windows Phone or Android.\n  if (hasExternalNotify(window)) {\n    window.external.notify(JSON.stringify({ eventType, eventData }));\n    return;\n  }\n\n  // Telegram for iOS and macOS.\n  if (hasWebviewProxy(window)) {\n    window.TelegramWebviewProxy.postEvent(eventType, JSON.stringify(eventData));\n    return;\n  }\n\n  // Otherwise current environment is unknown, and we are not able to send event.\n  throw createError(\n    ERR_UNKNOWN_ENV,\n    'Unable to determine current environment and possible way to send event. You are probably trying to use Mini Apps method outside the Telegram application environment.',\n  );\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_METHOD_PARAMETER_UNSUPPORTED, ERR_METHOD_UNSUPPORTED } from '@/errors/errors.js';\nimport { isRecord } from '@/misc/isRecord.js';\nimport { supports } from '@/supports/supports.js';\nimport type { Version } from '@/version/types.js';\n\nimport { type PostEvent, postEvent } from './postEvent.js';\n\n/**\n * Creates a function which checks if specified method and parameters are supported.\n *\n * If method or parameters are unsupported, an error will be thrown.\n * @param version - Telegram Mini Apps version.\n * @throws {SDKError} ERR_METHOD_UNSUPPORTED\n * @throws {SDKError} ERR_METHOD_PARAMETER_UNSUPPORTED\n * @see ERR_METHOD_UNSUPPORTED\n * @see ERR_METHOD_PARAMETER_UNSUPPORTED\n */\nexport function createPostEvent(version: Version): PostEvent {\n  return (method: any, params: any) => {\n    // Firstly, check if a method is supported.\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    if (!supports(method, version)) {\n      throw createError(ERR_METHOD_UNSUPPORTED, `Method \"${method}\" is unsupported in Mini Apps version ${version}`);\n    }\n\n    // Method could use parameters, which are supported only in specific\n    // versions of Mini Apps.\n    // We are validating only those parameters, which are not backward compatible.\n    if (\n      isRecord(params)\n      && method === 'web_app_set_header_color'\n      && 'color' in params\n      && !supports(method, 'color', version)\n    ) {\n      throw createError(\n        ERR_METHOD_PARAMETER_UNSUPPORTED,\n        `Parameter \"color\" of \"${method}\" method is unsupported in Mini Apps version ${version}`,\n      );\n    }\n\n    return postEvent(method, params);\n  };\n}\n","type CaptureSameReqFn = (payload: { req_id: string }) => boolean;\n\n/**\n * Returns a function which can be used in `request` function `capture` property to capture\n * the event with the same request identifier.\n * @param reqId - request identifier.\n */\nexport function captureSameReq(reqId: string): CaptureSameReqFn {\n  return ({ req_id }) => req_id === reqId;\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_TIMED_OUT } from '@/errors/errors.js';\nimport type { SDKError } from '@/errors/SDKError.js';\n\n/**\n * Creates new timeout error.\n * @param timeout - timeout in ms.\n */\nexport function createTimeoutError(timeout: number): SDKError {\n  return createError(ERR_TIMED_OUT, `Timeout reached: ${timeout}ms`);\n}\n","import { createTimeoutError } from '@/timeout/createTimeoutError.js';\n\n/**\n * Runs passed function or promise with specified deadline presented via timeout argument.\n * @param funcOrPromise - function to execute or pending promise.\n * @param timeout - completion timeout.\n */\nexport function withTimeout<T>(\n  funcOrPromise: Promise<T> | (() => Promise<T>),\n  timeout: number,\n): Promise<T> {\n  return Promise.race([\n    typeof funcOrPromise === 'function' ? funcOrPromise() : funcOrPromise,\n    new Promise<never>((_, rej) => {\n      setTimeout(() => {\n        rej(createTimeoutError(timeout));\n      }, timeout);\n    }),\n  ]);\n}\n","import { withTimeout } from '@/timeout/withTimeout.js';\nimport type { ExecuteWithOptions, If, IsNever } from '@/types/index.js';\n\nimport { on } from './events/listening/on.js';\nimport { postEvent as defaultPostEvent } from './methods/postEvent.js';\nimport type { MiniAppsEventName, MiniAppsEventPayload } from './events/types.js';\nimport type { MiniAppsMethodName, MiniAppsMethodParams } from './methods/types/index.js';\nimport { createCleanup } from '@/misc/createCleanup.js';\n\n/**\n * Returns all possible payloads for the specified events array.\n */\nexport type RequestEventsPayloads<E extends MiniAppsEventName[]> =\n  E extends (infer U extends MiniAppsEventName)[]\n    ? MiniAppsEventPayload<U>\n    : never;\n\nexport type RequestCaptureEventsFn<E extends MiniAppsEventName[]> =\n  E extends (infer U extends MiniAppsEventName)[]\n    ? (payload: {\n      [K in U]: If<\n        IsNever<MiniAppsEventPayload<K>>,\n        { event: K },\n        { event: K; payload: MiniAppsEventPayload<K> }\n      >\n    }[U]) => boolean\n    : never;\n\nexport type RequestCaptureEventFn<E extends MiniAppsEventName> = If<\n  IsNever<MiniAppsEventPayload<E>>,\n  () => boolean,\n  (payload: MiniAppsEventPayload<E>) => boolean\n>;\n\n/**\n * `request` method options.\n * @see request\n */\nexport type RequestOptions<M extends MiniAppsMethodName, E, C> = {\n    /**\n     * Mini Apps method name.\n     */\n    method: M;\n    /**\n     * Tracked Mini Apps events.\n     */\n    event: E;\n    /**\n     * Should return true if this event should be captured.\n     * A request will be captured if this property is omitted.\n     */\n    capture?: C;\n  }\n  & ExecuteWithOptions\n  & If<IsNever<MiniAppsMethodParams<M>>, {}, {\n  /**\n   * List of method parameters.\n   */\n  params: MiniAppsMethodParams<M>\n}>;\n\ntype AnyRequestResult =\n  | MiniAppsEventPayload<MiniAppsEventName>\n  | RequestEventsPayloads<MiniAppsEventName[]>;\n\n/**\n * Calls specified Mini Apps method and captures specified event.\n * @param options - method options.\n * @returns Promise which will be resolved with data of the captured event.\n */\nexport async function request<M extends MiniAppsMethodName, E extends MiniAppsEventName>(\n  options: RequestOptions<M, E, RequestCaptureEventFn<E>>,\n): Promise<MiniAppsEventPayload<E>>;\n\n/**\n * Calls specified Mini Apps method and captures one of the specified events.\n * @param options - method options.\n * @returns Promise which will be resolved with data of the first captured event.\n */\nexport async function request<M extends MiniAppsMethodName, E extends MiniAppsEventName[]>(\n  options: RequestOptions<M, E, RequestCaptureEventsFn<E>>,\n): Promise<RequestEventsPayloads<E>>;\n\nexport async function request<M extends MiniAppsMethodName>(\n  options:\n    | RequestOptions<M, MiniAppsEventName, RequestCaptureEventFn<MiniAppsEventName>>\n    | RequestOptions<M, MiniAppsEventName[], RequestCaptureEventsFn<MiniAppsEventName[]>>,\n): Promise<AnyRequestResult> {\n  let resolve: (payload: AnyRequestResult) => void;\n  const promise = new Promise<AnyRequestResult>(res => resolve = res);\n\n  const { event, capture, timeout } = options;\n  const [, cleanup] = createCleanup(\n    // We need to iterate over all tracked events, and create their event listeners.\n    (Array.isArray(event) ? event : [event]).map((ev) => {\n      // Each event listener waits for the event to occur.\n      // Then, if the capture function was passed, we should check if the event should be captured.\n      // If the function is omitted, we instantly capture the event.\n      return on(ev, (payload) => {\n        if (!capture || (\n          Array.isArray(event)\n            ? (capture as RequestCaptureEventsFn<MiniAppsEventName[]>)({\n              event: ev,\n              payload: payload as any,\n            })\n            : (capture as RequestCaptureEventFn<MiniAppsEventName>)(payload)\n        )) {\n          resolve(payload);\n        }\n      });\n    }),\n  );\n\n  try {\n    (options.postEvent || defaultPostEvent)(options.method as any, (options as any).params);\n    return await (timeout ? withTimeout(promise, timeout) : promise);\n  } finally {\n    // After promise execution was completed, don't forget to remove all the listeners.\n    cleanup();\n  }\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_INVOKE_CUSTOM_METHOD_RESPONSE } from '@/errors/errors.js';\nimport type { ExecuteWithOptions } from '@/types/index.js';\n\nimport { captureSameReq } from './captureSameReq.js';\nimport { request } from './request.js';\nimport type { CustomMethodName, CustomMethodParams } from './methods/types/custom-methods.js';\n\n/**\n * Invokes known custom method. Returns method execution result.\n * @param method - method name.\n * @param params - method parameters.\n * @param requestId - request identifier.\n * @param options - additional options.\n * @throws {SDKError} ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n * @see ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n */\nexport async function invokeCustomMethod<M extends CustomMethodName>(\n  method: M,\n  params: CustomMethodParams<M>,\n  requestId: string,\n  options?: ExecuteWithOptions,\n): Promise<unknown>;\n\n/**\n * Invokes unknown custom method. Returns method execution result.\n * @param method - method name.\n * @param params - method parameters.\n * @param requestId - request identifier.\n * @param options - additional options.\n * @throws {SDKError} ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n * @see ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n */\nexport function invokeCustomMethod(\n  method: string,\n  params: object,\n  requestId: string,\n  options?: ExecuteWithOptions,\n): Promise<unknown>;\n\nexport async function invokeCustomMethod(\n  method: string,\n  params: object,\n  requestId: string,\n  options: ExecuteWithOptions = {},\n): Promise<unknown> {\n  const {\n    result,\n    error,\n  } = await request({\n    ...options,\n    method: 'web_app_invoke_custom_method',\n    event: 'custom_method_invoked',\n    params: {\n      method,\n      params,\n      req_id: requestId,\n    },\n    capture: captureSameReq(requestId),\n  });\n\n  if (error) {\n    throw createError(ERR_INVOKE_CUSTOM_METHOD_RESPONSE, error);\n  }\n\n  return result;\n}\n","import { isRecord } from '@/misc/isRecord.js';\n\n/**\n * Function which joins passed values with space following these rules:\n * 1. If value is non-empty string, it will be added to output.\n * 2. If value is object, only those keys will be added, which values are truthy.\n * 3. If value is array, classNames will be called with this value spread.\n * 4. All other values are ignored.\n *\n * You can find this function to similar one from the package {@link https://www.npmjs.com/package/classnames|classnames}.\n * @param values - values array.\n * @returns Final class name.\n */\nexport function classNames(...values: any[]): string {\n  return values\n    .map((value) => {\n      if (typeof value === 'string') {\n        return value;\n      }\n\n      if (isRecord(value)) {\n        return classNames(Object.entries(value).map((entry) => entry[1] && entry[0]));\n      }\n\n      if (Array.isArray(value)) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        return classNames(...value);\n      }\n    })\n    .filter(Boolean)\n    .join(' ');\n}\n","import { isRecord } from '@/misc/isRecord.js';\nimport type { UnionOptionalKeys, UnionRequiredKeys } from '@/types/unions.js';\n\nimport { classNames } from './classNames.js';\n\nexport type MergeClassNames<Tuple extends any[]> =\n  // Removes all types from union which will be ignored by the mergeClassNames function.\n  Exclude<Tuple[number], number | string | null | undefined | any[] | boolean> extends infer Union\n    ? {\n    [K in UnionRequiredKeys<Union>]: string;\n  } & {\n    [K in UnionOptionalKeys<Union>]?: string;\n  }\n    : never;\n\n/**\n * Merges 2 sets of parameters. Function expects passing an array of objects with values, which\n * could be passed to `classNames` function. As the result, it returns an object with keys\n * from all objects with merged values.\n * @see classNames\n */\nexport function mergeClassNames<T extends any[]>(...partials: T): MergeClassNames<T> {\n  return partials.reduce<MergeClassNames<T>>((acc, partial) => {\n    if (!isRecord(partial)) {\n      return acc;\n    }\n\n    Object.entries(partial).forEach(([key, value]) => {\n      const className = classNames((acc as any)[key], value);\n\n      if (className.length) {\n        (acc as any)[key] = className;\n      }\n    });\n\n    return acc;\n  }, {} as MergeClassNames<T>);\n}\n","import type { RGB } from './types.js';\n\n/**\n * Returns true in case, passed value has #RRGGBB format.\n * @param value - value to check.\n */\nexport function isRGB(value: string): value is RGB {\n  return /^#[\\da-f]{6}$/i.test(value);\n}\n","import type { RGBShort } from './types.js';\n\n/**\n * Returns true in case, passed value has #RGB format.\n * @param value - value to check.\n */\nexport function isRGBShort(value: string): value is RGBShort {\n  return /^#[\\da-f]{3}$/i.test(value);\n}\n","import { isRGB } from './isRGB.js';\nimport { isRGBShort } from './isRGBShort.js';\nimport type { RGB } from './types.js';\n\n/**\n * Converts passed value to #RRGGBB format. Accepts following color formats:\n * - `#RGB`\n * - `#RRGGBB`\n * - `rgb(1,2,3)`\n * - `rgba(1,2,3,4)`\n * @param value - value to convert.\n * @throws {Error} Passed value does not satisfy any of known RGB formats.\n */\nexport function toRGB(value: string): RGB {\n  // Remove all spaces.\n  const clean = value.replace(/\\s/g, '').toLowerCase();\n\n  // Value already has required format.\n  if (isRGB(clean)) {\n    return clean;\n  }\n\n  // Convert from #RGB.\n  if (isRGBShort(clean)) {\n    let color: RGB = '#';\n    for (let i = 0; i < 3; i += 1) {\n      color += clean[1 + i].repeat(2);\n    }\n    return color;\n  }\n\n  // Example valid values: rgb(0,3,10) rgba(32,114,8,0)\n  const match = clean.match(/^rgb\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})\\)$/)\n    || clean.match(/^rgba\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3}),\\d{1,3}\\)$/);\n\n  // In case, this didn't work as well, we can't extract RGB color from passed\n  // text.\n  if (!match) {\n    throw new Error(`Value \"${value}\" does not satisfy any of known RGB formats.`);\n  }\n\n  // Otherwise, take R, G and B components, convert to hex and create #RRGGBB\n  // string.\n  return match.slice(1).reduce((acc, component) => {\n    const formatted = parseInt(component, 10).toString(16);\n    return acc + (formatted.length === 1 ? '0' : '') + formatted;\n  }, '#') as RGB;\n}\n","import { toRGB } from './toRGB.js';\n\n/**\n * Returns true in case, the color is recognized as dark.\n * @param color - color in any format acceptable by toRGB function.\n * @see toRGB\n */\nexport function isColorDark(color: string): boolean {\n  // Convert color to RGB.\n  const rgb = toRGB(color);\n\n  // Real formula: hsp = Math.sqrt(0.299 * r * r + 0.587 * g * g + 0.114 * b * b)\n  // See: https://stackoverflow.com/a/596243\n  return Math.sqrt(\n    [0.299, 0.587, 0.114].reduce<number>((acc, modifier, idx) => {\n      // Extract part of #RRGGBB pattern and convert it to DEC.\n      const dec = parseInt(rgb.slice(1 + idx * 2, 1 + (idx + 1) * 2), 16);\n      return acc + dec * dec * modifier;\n    }, 0),\n  ) < 120;\n}\n","import { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport type { StateEvents } from '@/classes/State/types.js';\nimport type { StringKeys } from '@/types/utils.js';\n\ntype Emitter<State extends object> = EventEmitter<StateEvents<State>>;\n\nexport class State<State extends object> {\n  private readonly ee: Emitter<State> = new EventEmitter();\n\n  constructor(\n    /**\n     * Initial state.\n     */\n    private readonly state: State,\n  ) {\n  }\n\n  /**\n   * Clones current state and returns its copy.\n   */\n  clone(): State {\n    return { ...this.state };\n  }\n\n  /**\n   * Sets value by key.\n   * @param key - state key.\n   * @param value - value to set.\n   */\n  set<K extends StringKeys<State>>(key: K, value: State[K]): void;\n  /**\n   * Sets several values simultaneously.\n   * @param state - partial state.\n   */\n  set(state: Partial<State>): void;\n  set(keyOrState: StringKeys<State> | Partial<State>, keyValue?: State[keyof State]): void {\n    const didChange = Object\n      .entries(typeof keyOrState === 'string' ? { [keyOrState]: keyValue } : keyOrState)\n      .reduce((acc, [key, value]) => {\n        // If value is the same or missing at all, we skip it.\n        if (this.state[key as keyof State] === value || value === undefined) {\n          return acc;\n        }\n\n        // Otherwise set new value and emit change event.\n        this.state[key as keyof State] = value;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        (this.ee as any).emit(`change:${key}`, value);\n\n        return true;\n      }, false);\n\n    if (didChange) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      (this.ee as any).emit('change', this.state);\n    }\n  }\n\n  /**\n   * Returns value by specified key.\n   * @param key - state key.\n   */\n  get<K extends StringKeys<State>>(key: K): State[K] {\n    return this.state[key];\n  }\n\n  /**\n   * Adds new event listener.\n   */\n  on: Emitter<State>['on'] = this.ee.on.bind(this.ee);\n\n  /**\n   * Removes event listener.\n   */\n  off: Emitter<State>['off'] = this.ee.off.bind(this.ee);\n}\n","import { State } from '@/classes/State/State.js';\n\nexport class WithStateUtils<Shape extends object> {\n  protected state: State<Shape>;\n\n  constructor(shape: Shape) {\n    this.state = new State(shape);\n    this.set = this.state.set.bind(this.state);\n    this.get = this.state.get.bind(this.state);\n    this.clone = this.state.clone.bind(this.state);\n  }\n\n  /**\n   * Gets the state value.\n   */\n  protected get: State<Shape>['get'];\n\n  /**\n   * Sets the state value.\n   */\n  protected set: State<Shape>['set'];\n\n  /**\n   * Clones the current state.\n   */\n  protected clone: State<Shape>['clone'];\n}\n","import { supports } from '@/supports/supports.js';\nimport type { MiniAppsMethodName } from '@/bridge/methods/types/methods.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { Version } from '@/version/types.js';\n\nexport type SupportsSchema<Method extends string> = Record<Method, MiniAppsMethodName>;\n\n/**\n * Returns function, which accepts predefined method name and checks if it is supported\n * via passed schema and version.\n * @param schema - object which contains methods names and TWA method as a dependency.\n * @param version - platform version.\n */\nexport function createSupportsFn<Method extends string>(\n  version: Version,\n  schema: SupportsSchema<Method>,\n): SupportsFn<Method> {\n  return (method) => supports(schema[method], version);\n}\n","import { WithStateUtils } from '@/classes/WithStateUtils.js';\nimport { createSupportsFn } from '@/supports/createSupportsFn.js';\nimport type { MiniAppsMethodName } from '@/bridge/methods/types/methods.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { Version } from '@/version/types.js';\n\nexport class WithSupportsAndStateUtils<StateShape extends object, SupportsMethod extends string>\nextends WithStateUtils<StateShape> {\n  constructor(\n    /**\n     * Initial state.\n     */\n    stateShape: StateShape,\n    /**\n     * Mini Apps version.\n     */\n    version: Version,\n    /**\n     * Supports method schema.\n     */\n    supportsSchema: Record<SupportsMethod, MiniAppsMethodName>,\n  ) {\n    super(stateShape);\n    this.supports = createSupportsFn(version, supportsSchema);\n  }\n\n  /**\n   * @returns True, if specified method is supported by the current component.\n   */\n  supports: SupportsFn<SupportsMethod>;\n}\n","import { off } from '@/bridge/events/listening/off.js';\nimport { on } from '@/bridge/events/listening/on.js';\nimport { WithSupportsAndStateUtils } from '@/classes/WithSupportsAndStateUtils.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { BackButtonEvents, BackButtonState } from '@/components/BackButton/types.js';\nimport type { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport type { Version } from '@/version/types.js';\n\ntype Emitter = EventEmitter<BackButtonEvents>;\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/back-button\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/back-button\n */\nexport class BackButton extends WithSupportsAndStateUtils<BackButtonState, 'show' | 'hide'> {\n  constructor(isVisible: boolean, version: Version, private readonly postEvent: PostEvent) {\n    super({ isVisible }, version, {\n      show: 'web_app_setup_back_button',\n      hide: 'web_app_setup_back_button',\n    });\n  }\n\n  private set isVisible(visible: boolean) {\n    this.set('isVisible', visible);\n    this.postEvent('web_app_setup_back_button', { is_visible: visible });\n  }\n\n  /**\n   * True if BackButton is currently visible.\n   */\n  get isVisible(): boolean {\n    return this.get('isVisible');\n  }\n\n  /**\n   * Hides the BackButton.\n   */\n  hide(): void {\n    this.isVisible = false;\n  }\n\n  /**\n   * Adds a new event listener.\n   * @param event - event to listen.\n   * @param listener - listener to add.\n   */\n  on: Emitter['on'] = (event, listener) => (\n    event === 'click'\n      ? on('back_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.on(event, listener as any)\n  );\n\n  /**\n   * Removes the event listener.\n   * @param event - event to listen.\n   * @param listener - listener to remove.\n   */\n  off: Emitter['off'] = (event, listener) => (\n    event === 'click'\n      ? off('back_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.off(event, listener as any)\n  );\n\n  /**\n   * Shows the BackButton.\n   */\n  show(): void {\n    this.isVisible = true;\n  }\n}\n","import { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport { number } from './number.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as Date.\n */\nexport const date: ValueParserGenerator<Date> = createValueParserGenerator((value) => (\n  value instanceof Date\n    ? value\n    : new Date(number().parse(value) * 1000)\n), 'Date');\n","import { createTypeError } from '../createTypeError.js';\nimport { parseBySchema } from '../parseBySchema.js';\nimport { ValueParser } from '../ValueParser/ValueParser.js';\nimport type { Schema } from '../types.js';\n\n/**\n * Creates new search params parser according to passed schema.\n * @param schema - object schema.\n * @param type - parser type name.\n */\nexport function searchParams<T>(schema: Schema<T>, type?: string): ValueParser<T, false> {\n  return new ValueParser((value) => {\n    if (typeof value !== 'string' && !(value instanceof URLSearchParams)) {\n      throw createTypeError();\n    }\n\n    const params = typeof value === 'string' ? new URLSearchParams(value) : value;\n\n    return parseBySchema(schema, (field) => {\n      const paramValue = params.get(field);\n      return paramValue === null ? undefined : paramValue;\n    });\n  }, false, type);\n}\n","import { json } from '@/parsing/parsers/json.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { string } from '@/parsing/parsers/string.js';\n\nimport type { Chat } from '../types.js';\n\nexport const chat = json<Chat>({\n  id: number(),\n  type: string(),\n  title: string(),\n  photoUrl: {\n    type: string().optional(),\n    from: 'photo_url',\n  },\n  username: string().optional(),\n}, 'Chat')\n  .optional();\n","import { boolean } from '@/parsing/parsers/boolean.js';\nimport { json } from '@/parsing/parsers/json.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { string } from '@/parsing/parsers/string.js';\n\nimport type { User } from '../types.js';\n\nexport const user = json<User>({\n  addedToAttachmentMenu: {\n    type: boolean().optional(),\n    from: 'added_to_attachment_menu',\n  },\n  allowsWriteToPm: {\n    type: boolean().optional(),\n    from: 'allows_write_to_pm',\n  },\n  firstName: {\n    type: string(),\n    from: 'first_name',\n  },\n  id: number(),\n  isBot: {\n    type: boolean().optional(),\n    from: 'is_bot',\n  },\n  isPremium: {\n    type: boolean().optional(),\n    from: 'is_premium',\n  },\n  languageCode: {\n    type: string().optional(),\n    from: 'language_code',\n  },\n  lastName: {\n    type: string().optional(),\n    from: 'last_name',\n  },\n  photoUrl: {\n    type: string().optional(),\n    from: 'photo_url',\n  },\n  username: string().optional(),\n}, 'User')\n  .optional();\n","import { date } from '@/parsing/parsers/date.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { searchParams } from '@/parsing/parsers/searchParams.js';\nimport { string } from '@/parsing/parsers/string.js';\nimport type { ValueParser } from '@/parsing/ValueParser/ValueParser.js';\n\nimport { chat } from './chat.js';\nimport { user } from './user.js';\nimport type { InitDataParsed } from '../types.js';\n\n/**\n * Returns parser used to parse init data, presented as search params.\n */\nexport function initData(): ValueParser<InitDataParsed, false> {\n  return searchParams<InitDataParsed>({\n    authDate: {\n      type: date(),\n      from: 'auth_date',\n    },\n    canSendAfter: {\n      type: number().optional(),\n      from: 'can_send_after',\n    },\n    chat,\n    chatInstance: {\n      type: string().optional(),\n      from: 'chat_instance',\n    },\n    chatType: {\n      type: string().optional(),\n      from: 'chat_type',\n    },\n    hash: string(),\n    queryId: {\n      type: string().optional(),\n      from: 'query_id',\n    },\n    receiver: user,\n    startParam: {\n      type: string().optional(),\n      from: 'start_param',\n    },\n    user,\n  }, 'InitData');\n}\n","import { toRGB } from '@/colors/toRGB.js';\nimport type { RGB } from '@/colors/types.js';\n\nimport { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport { string } from './string.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as RGB color.\n */\nexport const rgb: ValueParserGenerator<RGB> = createValueParserGenerator((value) => toRGB(string().parse(value)), 'rgb');\n","/**\n * Converts a palette key from the Telegram application to the representation used by the package.\n * @param key - palette key.\n */\nexport function keyToLocal(key: string): string {\n  return key.replace(/_[a-z]/g, (match) => match[1].toUpperCase());\n}\n\n/**\n * Converts palette key from the local representation to the representation sent from the\n * Telegram application.\n * @param key - palette key.\n */\nexport function keyToExternal(key: string): string {\n  return key.replace(/[A-Z]/g, (match) => `_${match.toLowerCase()}`);\n}\n","import { createValueParserGenerator, type ValueParserGenerator } from '@/parsing/createValueParserGenerator.js';\nimport { rgb } from '@/parsing/parsers/rgb.js';\nimport { toRecord } from '@/parsing/toRecord.js';\n\nimport { keyToLocal } from '../keys.js';\nimport type { ThemeParamsParsed } from '../types.js';\n\nexport const themeParams: ValueParserGenerator<ThemeParamsParsed> = createValueParserGenerator(\n  (value) => {\n    const rgbOptional = rgb().optional();\n\n    return Object\n      .entries(toRecord(value))\n      .reduce<ThemeParamsParsed>((acc, [k, v]) => {\n        acc[keyToLocal(k)] = rgbOptional.parse(v);\n        return acc;\n      }, {});\n  },\n  'ThemeParams',\n);\n","import { initData } from '@/components/InitData/parsers/initData.js';\nimport { themeParams } from '@/components/ThemeParams/parsing/themeParams.js';\nimport { boolean } from '@/parsing/parsers/boolean.js';\nimport { searchParams } from '@/parsing/parsers/searchParams.js';\nimport { string } from '@/parsing/parsers/string.js';\n\nimport type { LaunchParams } from './types.js';\n\n/**\n * Parses value as launch parameters.\n * @param value - value to parse.\n */\nexport function parseLaunchParams(value: unknown): LaunchParams {\n  return searchParams({\n    botInline: {\n      type: boolean().optional(),\n      from: 'tgWebAppBotInline',\n    },\n    initData: {\n      type: initData().optional(),\n      from: 'tgWebAppData',\n    },\n    initDataRaw: {\n      type: string().optional(),\n      from: 'tgWebAppData',\n    },\n    platform: {\n      type: string(),\n      from: 'tgWebAppPlatform',\n    },\n    showSettings: {\n      type: boolean().optional(),\n      from: 'tgWebAppShowSettings',\n    },\n    startParam: {\n      type: string().optional(),\n      from: 'tgWebAppStartParam',\n    },\n    themeParams: {\n      type: themeParams(),\n      from: 'tgWebAppThemeParams',\n    },\n    version: {\n      type: string(),\n      from: 'tgWebAppVersion',\n    },\n  }).parse(value);\n}\n","import { parseLaunchParams } from './parseLaunchParams.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * @param urlString - URL to extract launch parameters from.\n * @returns Launch parameters from the specified URL.\n * @throws Error if function was unable to extract launch parameters from the passed URL.\n */\nexport function retrieveFromUrl(urlString: string): LaunchParams {\n  return parseLaunchParams(\n    urlString\n      // Replace everything before this first hashtag or question sign.\n      .replace(/^[^?#]*[?#]/, '')\n      // Replace all hashtags and question signs to make it look like some search params.\n      .replace(/[?#]/g, '&'),\n  );\n}\n","import { retrieveFromUrl } from './retrieveFromUrl.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * @returns Launch parameters from the current window location hash.\n * @throws Error if function was unable to extract launch parameters from the window location hash.\n */\nexport function retrieveFromLocation(): LaunchParams {\n  return retrieveFromUrl(window.location.href);\n}\n","/**\n * Returns the first navigation entry from window.performance.\n * @returns First navigation entry or null, in case performance functionality is not supported\n * or navigation entry was not found.\n */\nexport function getFirstNavigationEntry(): PerformanceNavigationTiming | undefined {\n  return performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming | undefined;\n}\n","import { getFirstNavigationEntry } from '@/navigation/getFirstNavigationEntry.js';\n\nimport { retrieveFromUrl } from './retrieveFromUrl.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * @returns Launch parameters based on the first navigation entry.\n * @throws Error if function was unable to extract launch parameters from the navigation entry.\n */\nexport function retrieveFromPerformance(): LaunchParams {\n  const navigationEntry = getFirstNavigationEntry();\n  if (!navigationEntry) {\n    throw new Error('Unable to get first navigation entry.');\n  }\n\n  return retrieveFromUrl(navigationEntry.name);\n}\n","import type { BackButtonState } from '@/components/BackButton/types.js';\nimport type { BiometryManagerState } from '@/components/BiometryManager/types.js';\nimport type { ClosingBehaviorState } from '@/components/ClosingBehavior/types.js';\nimport type { MainButtonState } from '@/components/MainButton/types.js';\nimport type { MiniAppState } from '@/components/MiniApp/types.js';\nimport type { SettingsButtonState } from '@/components/SettingsButton/types.js';\nimport type { ThemeParamsParsed } from '@/components/ThemeParams/types.js';\nimport type { ViewportState } from '@/components/Viewport/types.js';\n\n/**\n * Describes storage keys and according values.\n */\nexport interface StorageParams {\n  backButton: BackButtonState;\n  biometryManager: BiometryManagerState;\n  closingBehavior: ClosingBehaviorState;\n  launchParams: string;\n  mainButton: MainButtonState;\n  miniApp: MiniAppState;\n  settingsButton: SettingsButtonState;\n  themeParams: ThemeParamsParsed;\n  viewport: ViewportState;\n}\n\n/**\n * Key which could be used to store data in the storage.\n */\nexport type StorageKey = keyof StorageParams;\n\n/**\n * Type specific to the specified storage key.\n */\nexport type StorageValue<K extends StorageKey> = StorageParams[K];\n\n/**\n * Converts passed storage key to the formatted state.\n * @param key - storage key.\n */\nfunction formatKey(key: StorageKey): string {\n  return `telegram-apps/${key.replace(/[A-Z]/g, (m) => `-${m.toLowerCase()}`)}`;\n}\n\n/**\n * Saves value in the storage.\n * @param key - storage key.\n * @param value - storage value.\n */\nexport function setStorageValue<K extends StorageKey>(key: K, value: StorageValue<K>): void {\n  sessionStorage.setItem(formatKey(key), JSON.stringify(value));\n}\n\n/**\n * Extracts value from the storage.\n * @param key - storage key.\n */\nexport function getStorageValue<K extends StorageKey>(key: K): StorageValue<K> | undefined {\n  const value = sessionStorage.getItem(formatKey(key));\n  try {\n    return value ? JSON.parse(value) as StorageValue<K> : undefined;\n  } catch { /* empty */ }\n}\n","import { parseLaunchParams } from '@/launch-params/parseLaunchParams.js';\nimport { getStorageValue } from '@/storage/storage.js';\nimport type { LaunchParams } from '@/launch-params/types.js';\n\n/**\n * @returns Launch parameters stored in the session storage.\n * @throws Error if function was unable to extract launch parameters from the window location hash.\n */\nexport function retrieveFromStorage(): LaunchParams {\n  return parseLaunchParams(getStorageValue('launchParams') || '');\n}\n","import { keyToExternal } from '../keys.js';\nimport type { ThemeParamsParsed } from '../types.js';\n\n/**\n * Serializes theme parameters to representation sent from the Telegram application.\n */\nexport function serializeThemeParams(themeParams: ThemeParamsParsed): string {\n  return JSON.stringify(\n    Object.fromEntries(\n      Object\n        .entries(themeParams)\n        .map(([key, value]) => [keyToExternal(key), value]),\n    ),\n  );\n}\n","import { serializeThemeParams } from '@/components/ThemeParams/parsing/serializeThemeParams.js';\n\nimport type { LaunchParams } from './types.js';\n\n/**\n * Converts launch parameters to its initial representation.\n * @param value - launch parameters.\n */\nexport function serializeLaunchParams(value: LaunchParams): string {\n  const {\n    initDataRaw,\n    themeParams,\n    platform,\n    version,\n    showSettings,\n    startParam,\n    botInline,\n  } = value;\n\n  const params = new URLSearchParams();\n\n  params.set('tgWebAppPlatform', platform);\n  params.set('tgWebAppThemeParams', serializeThemeParams(themeParams));\n  params.set('tgWebAppVersion', version);\n\n  if (initDataRaw) {\n    params.set('tgWebAppData', initDataRaw);\n  }\n\n  if (startParam) {\n    params.set('tgWebAppStartParam', startParam);\n  }\n\n  if (typeof showSettings === 'boolean') {\n    params.set('tgWebAppShowSettings', showSettings ? '1' : '0');\n  }\n\n  if (typeof botInline === 'boolean') {\n    params.set('tgWebAppBotInline', botInline ? '1' : '0');\n  }\n\n  return params.toString();\n}\n","import { setStorageValue } from '@/storage/storage.js';\n\nimport { serializeLaunchParams } from './serializeLaunchParams.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * Saves specified launch parameters in the session storage.\n * @param value - launch params to save.\n */\nexport function saveToStorage(value: LaunchParams): void {\n  setStorageValue('launchParams', serializeLaunchParams(value));\n}\n","import { retrieveFromLocation } from './retrieveFromLocation.js';\nimport { retrieveFromPerformance } from './retrieveFromPerformance.js';\nimport { retrieveFromStorage } from './retrieveFromStorage.js';\nimport { saveToStorage } from './saveToStorage.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * @returns Launch parameters from any known source.\n * @throws Error if extraction was unsuccessful.\n */\nexport function retrieveLaunchParams(): LaunchParams {\n  const errors: unknown[] = [];\n\n  for (const retrieve of [\n    // Try to retrieve launch parameters from the current location. This method can return\n    // nothing in case, location was changed and then page was reloaded.\n    retrieveFromLocation,\n    // Then, try using the lower level API - window.performance.\n    retrieveFromPerformance,\n    // Finally, try to extract launch parameters from the session storage.\n    retrieveFromStorage,\n  ]) {\n    try {\n      const lp = retrieve();\n      saveToStorage(lp);\n      return lp;\n    } catch (e) {\n      errors.push(e);\n    }\n  }\n\n  throw new Error('Unable to retrieve launch parameters from any known source.');\n}\n","import { getFirstNavigationEntry } from './getFirstNavigationEntry.js';\n\n/**\n * @returns True, if current page was reloaded.\n * @see https://stackoverflow.com/a/36444134/11894710\n */\nexport function isPageReload(): boolean {\n  const entry = getFirstNavigationEntry();\n  return !!(entry && entry.type === 'reload');\n}\n","import { createPostEvent } from '@/bridge/methods/createPostEvent.js';\nimport { retrieveLaunchParams } from '@/launch-params/retrieveLaunchParams.js';\nimport { createSingleton } from '@/misc/createSingleton.js';\nimport { isPageReload } from '@/navigation/isPageReload.js';\nimport { createRequestIdGenerator } from '@/request-id/createRequestIdGenerator.js';\nimport type { StorageKey, StorageValue } from '@/storage/storage.js';\nimport { getStorageValue, setStorageValue } from '@/storage/storage.js';\nimport { createCleanup } from '@/misc/createCleanup.js';\n\nimport {\n  FactoryDynamic,\n  FactoryStatic,\n  InitStaticComponentFn,\n  InitDynamicComponentFn,\n  WithOnChange,\n} from './types.js';\n\nconst [createReqId] = createSingleton(createRequestIdGenerator);\n\n/**\n * Creates a new init function based on factory, creating a component, not synchronizing its\n * state with the session storage.\n * @param factory - function creating new component instance.\n */\nexport function createComponentInitFn<R>(factory: FactoryStatic<R>): InitStaticComponentFn<R>;\n\n/**\n * Creates a new init function based on factory, creating a component, synchronizing its\n * state with the session storage.\n * @param factory - function creating new component instance.\n * @param storageKey - storage key to restore component from.\n */\nexport function createComponentInitFn<\n  SK extends StorageKey,\n  R extends WithOnChange<StorageValue<SK>> | Promise<WithOnChange<StorageValue<SK>>>,\n>(\n  storageKey: SK,\n  factory: FactoryDynamic<R, SK>,\n): InitDynamicComponentFn<R>;\n\nexport function createComponentInitFn<\n  R extends WithOnChange<StorageValue<SK>> | Promise<WithOnChange<StorageValue<SK>>>,\n  SK extends StorageKey,\n>(\n  factoryStaticOrSK: FactoryStatic<R> | SK,\n  factoryDynamic?: FactoryDynamic<R, SK>,\n): InitStaticComponentFn<R> | InitDynamicComponentFn<R> {\n  return () => {\n    const lp = retrieveLaunchParams();\n    const factoryOptions = {\n      ...lp,\n      postEvent: createPostEvent(lp.version),\n      createRequestId: createReqId(),\n    };\n\n    // In static init mode we have no reason to use the storage to restore the state. In this\n    // case we should just call the factory.\n    if (typeof factoryStaticOrSK === 'function') {\n      return factoryStaticOrSK(factoryOptions);\n    }\n\n    // Otherwise, we create a new component instance from the storage if possible and add\n    // required change listeners.\n    const [addCleanup, cleanup, cleanedUp] = createCleanup();\n\n    const result = factoryDynamic!({\n      ...factoryOptions,\n      // State should only be passed only in case, current page was reloaded. If we don't add\n      // this check, state restoration will work improperly in the web version of Telegram,\n      // when we are always working in the same \"session\" (tab).\n      state: isPageReload() ? getStorageValue(factoryStaticOrSK) : undefined,\n      addCleanup,\n    });\n\n    const bindChange = (value: WithOnChange<StorageValue<SK>>) => {\n      if (!cleanedUp) {\n        addCleanup(\n          value.on('change', (state) => {\n            setStorageValue(factoryStaticOrSK, state);\n          }),\n        );\n      }\n      return value;\n    };\n\n    return [\n      result instanceof Promise ? result.then(bindChange) : bindChange(result),\n      cleanup,\n    ] as unknown as R;\n  };\n}\n","import type { CreateRequestIdFn } from './types.js';\n\n/**\n * Creates function which generated request identifiers.\n */\nexport function createRequestIdGenerator(): CreateRequestIdFn {\n  let requestId = 0;\n  return () => (requestId += 1).toString();\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { BackButton } from './BackButton.js';\n\n/**\n * @returns A new initialized instance of the `BackButton` class.\n * @see BackButton\n */\nexport const initBackButton = createComponentInitFn('backButton', ({\n  postEvent,\n  version,\n  state = { isVisible: false },\n}) => new BackButton(state.isVisible, version, postEvent));\n","import { WithSupportsAndStateUtils } from '@/classes/WithSupportsAndStateUtils.js';\nimport type { StateEvents } from '@/classes/State/types.js';\nimport type { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\n\ntype Emitter<StateShape extends object> = EventEmitter<StateEvents<StateShape>>;\n\nexport class WithSupportsAndTrackableState<StateShape extends object, SupportsMethod extends string>\n  extends WithSupportsAndStateUtils<StateShape, SupportsMethod> {\n  /**\n   * Adds a new event listener.\n   */\n  on: Emitter<StateShape>['on'] = this.state.on.bind(this.state);\n\n  /**\n   * Removes the event listener.\n   */\n  off: Emitter<StateShape>['off'] = this.state.off.bind(this.state);\n}\n","import type { BiometryType, MiniAppsEventPayload } from '@/bridge/events/types.js';\n\nexport interface FormatBiometryInfoResult {\n  /**\n   * Shows whether biometry is available.\n   */\n  available: boolean;\n  /**\n   * Shows whether permission to use biometrics has been requested.\n   */\n  accessRequested: boolean;\n  /**\n   * Shows whether permission to use biometrics has been granted.\n   */\n  accessGranted: boolean;\n  /**\n   * A unique device identifier that can be used to match the token to the device.\n   */\n  deviceId: string;\n  /**\n   * Show whether local storage contains previously saved token.\n   */\n  tokenSaved: boolean;\n  /**\n   * The type of biometrics currently available on the device.\n   */\n  type: BiometryType;\n}\n\n/**\n * Converts `biometry_info_received` to some common shape.\n * @param event - event payload.\n * @see biometry_info_received\n */\nexport function formatEvent(\n  event: MiniAppsEventPayload<'biometry_info_received'>,\n): FormatBiometryInfoResult {\n  const data = event.available ? event : {\n    available: false,\n    device_id: '',\n    token_saved: false,\n    access_requested: false,\n    access_granted: false,\n    type: '',\n  };\n\n  return {\n    available: true,\n    type: data.type,\n    deviceId: data.device_id,\n    tokenSaved: data.token_saved,\n    accessRequested: data.access_requested,\n    accessGranted: data.access_granted,\n  };\n}\n","import { request } from '@/bridge/request.js';\nimport { WithSupportsAndTrackableState } from '@/classes/WithSupportsAndTrackableState.js';\nimport { formatEvent } from '@/components/BiometryManager/formatEvent.js';\nimport type { BiometryType } from '@/bridge/events/types.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type {\n  BiometryManagerAuthenticateOptions,\n  BiometryManagerProps,\n  BiometryManagerRequestAccessOptions,\n  BiometryManagerState,\n  BiometryManagerUpdateTokenOptions,\n} from '@/components/BiometryManager/types.js';\n\nexport class BiometryManager extends WithSupportsAndTrackableState<BiometryManagerState,\n  | 'auth'\n  | 'openSettings'\n  | 'requestAccess'\n  | 'updateToken'\n> {\n  private readonly postEvent: PostEvent;\n\n  private authPromise?: Promise<string | undefined>;\n\n  private accessPromise?: Promise<boolean>;\n\n  constructor({ postEvent, version, ...rest }: BiometryManagerProps) {\n    super(rest, version, {\n      auth: 'web_app_biometry_request_auth',\n      openSettings: 'web_app_biometry_open_settings',\n      requestAccess: 'web_app_biometry_request_access',\n      updateToken: 'web_app_biometry_update_token',\n    });\n    this.postEvent = postEvent;\n  }\n\n  /**\n   * Shows whether biometry is available.\n   */\n  get available(): boolean {\n    return this.get('available');\n  }\n\n  /**\n   * Shows whether permission to use biometrics has been granted.\n   */\n  get accessGranted(): boolean {\n    return this.get('accessGranted');\n  }\n\n  /**\n   * Shows whether if permission to use biometrics has been requested.\n   */\n  get accessRequested(): boolean {\n    return this.get('accessRequested');\n  }\n\n  /**\n   * Authenticates the user using biometrics.\n   * @param options - method options.\n   * @since 7.2\n   * @returns Token from the local secure storage, if authentication was successful.\n   */\n  async authenticate({\n    reason,\n    ...rest\n  }: BiometryManagerAuthenticateOptions): Promise<string | undefined> {\n    if (!this.authPromise) {\n      this.authPromise = request({\n        ...rest,\n        method: 'web_app_biometry_request_auth',\n        event: 'biometry_auth_requested',\n        postEvent: this.postEvent,\n        params: {\n          // TODO: Check if reason is empty works fine.\n          reason: (reason || '').trim(),\n        },\n      })\n        .then(({ token }) => token)\n        .finally(() => this.authPromise = undefined);\n    }\n    return this.authPromise;\n  }\n\n  /**\n   * A unique device identifier that can be used to match the token to the device.\n   */\n  get deviceId(): string {\n    return this.get('deviceId');\n  }\n\n  /**\n   * Opens the biometric access settings for bots. Useful when you need to request biometrics\n   * access to users who haven't granted it yet.\n   *\n   * _Note that this method can be called only in response to user interaction with the Mini App\n   * interface (e.g. a click inside the Mini App or on the main button)_.\n   * @since 7.2\n   */\n  openSettings(): void {\n    this.postEvent('web_app_biometry_open_settings');\n  }\n\n  /**\n   * Requests permission to use biometrics.\n   * @since 7.2\n   * @returns Promise with true, if access was granted.\n   */\n  requestAccess({ reason, ...rest }: BiometryManagerRequestAccessOptions = {}): Promise<boolean> {\n    if (!this.accessPromise) {\n      this.accessPromise = request({\n        ...rest,\n        postEvent: this.postEvent,\n        method: 'web_app_biometry_request_access',\n        event: 'biometry_info_received',\n        params: { reason: reason || '' },\n      })\n        .then((response) => {\n          // Actualize local state.\n          const formatted = formatEvent(response);\n          this.set(formatted);\n\n          return formatted.accessGranted;\n        })\n        .finally(() => this.accessPromise = undefined);\n    }\n    return this.accessPromise;\n  }\n\n  /**\n   * The type of biometrics currently available on the device.\n   */\n  get biometryType(): BiometryType | undefined {\n    return this.get('biometryType');\n  }\n\n  /**\n   * Shows whether token was saved previously in the local secure storage.\n   */\n  get tokenSaved(): boolean {\n    return this.get('tokenSaved');\n  }\n\n  /**\n   * Updates the biometric token in a secure storage on the device.\n   * @returns Promise with `true`, if token was updated.\n   */\n  async updateToken({ token, ...rest }: BiometryManagerUpdateTokenOptions = {}): Promise<boolean> {\n    return ['removed', 'updated'].includes(\n      (\n        await request({\n          ...rest,\n          postEvent: this.postEvent,\n          method: 'web_app_biometry_update_token',\n          event: 'biometry_token_updated',\n          params: { token: token || '' },\n        })\n      ).status,\n    );\n  }\n}\n","import { request } from '@/bridge/request.js';\nimport type { ExecuteWithOptions } from '@/types/index.js';\n\nimport { formatEvent } from './formatEvent.js';\nimport type { FormatBiometryInfoResult } from './formatEvent.js';\n\n/**\n * Requests biometry information.\n * @param options - additional execution options.\n */\nexport async function requestBiometryInfo(\n  options?: ExecuteWithOptions,\n): Promise<FormatBiometryInfoResult> {\n  return formatEvent(\n    await request({\n      ...(options || {}),\n      method: 'web_app_biometry_get_info',\n      event: 'biometry_info_received',\n    }),\n  );\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\nimport { supports } from '@/supports/supports.js';\n\nimport { BiometryManager } from './BiometryManager.js';\nimport { requestBiometryInfo } from './requestBiometryInfo.js';\n\n/**\n * @returns A promise with a new initialized instance of the `BiometryManager` class.\n * @see BiometryManager\n */\nexport const initBiometryManager = createComponentInitFn(\n  'biometryManager',\n  async ({ postEvent, version, state }) => {\n    return new BiometryManager({\n      ...(state || supports('web_app_biometry_get_info', version)\n        ? state || await requestBiometryInfo({ timeout: 1000 })\n        : {\n          available: false,\n          accessGranted: false,\n          accessRequested: false,\n          tokenSaved: false,\n          deviceId: '',\n        }),\n      version,\n      postEvent,\n    });\n  },\n);\n","import { WithStateUtils } from '@/classes/WithStateUtils.js';\nimport type { StateEvents } from '@/classes/State/types.js';\nimport type { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\n\ntype Emitter<StateShape extends object> = EventEmitter<StateEvents<StateShape>>;\n\nexport class WithTrackableState<StateShape extends object>\n  extends WithStateUtils<StateShape> {\n  /**\n   * Adds a new event listener.\n   */\n  on: Emitter<StateShape>['on'] = this.state.on.bind(this.state);\n\n  /**\n   * Removes the event listener.\n   */\n  off: Emitter<StateShape>['off'] = this.state.off.bind(this.state);\n}\n","import { WithTrackableState } from '@/classes/WithTrackableState.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { ClosingBehaviorState } from '@/components/ClosingBehavior/types.js';\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/closing-behavior\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/closing-behavior\n */\nexport class ClosingBehavior extends WithTrackableState<ClosingBehaviorState> {\n  constructor(isConfirmationNeeded: boolean, private readonly postEvent: PostEvent) {\n    super({ isConfirmationNeeded });\n  }\n\n  private set isConfirmationNeeded(value: boolean) {\n    this.set('isConfirmationNeeded', value);\n    this.postEvent('web_app_setup_closing_behavior', { need_confirmation: value });\n  }\n\n  /**\n   * True, if the confirmation dialog should be shown while the user is trying to close\n   * the Mini App.\n   */\n  get isConfirmationNeeded(): boolean {\n    return this.get('isConfirmationNeeded');\n  }\n\n  /**\n   * Disables the confirmation dialog when closing the Mini App.\n   */\n  disableConfirmation(): void {\n    this.isConfirmationNeeded = false;\n  }\n\n  /**\n   * Enables the confirmation dialog when closing the Mini App.\n   */\n  enableConfirmation(): void {\n    this.isConfirmationNeeded = true;\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { ClosingBehavior } from './ClosingBehavior.js';\n\n/**\n * @returns A new initialized instance of the `ClosingBehavior` class.\n * @see ClosingBehavior\n */\nexport const initClosingBehavior = createComponentInitFn(\n  'closingBehavior',\n  ({\n    postEvent,\n    state = { isConfirmationNeeded: false },\n  }) => new ClosingBehavior(state.isConfirmationNeeded, postEvent),\n);\n","import { createSupportsFn } from '@/supports/createSupportsFn.js';\nimport type { MiniAppsMethodName } from '@/bridge/methods/types/methods.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { Version } from '@/version/types.js';\n\nexport class WithSupports<SupportsMethod extends string> {\n  constructor(\n    /**\n     * Mini Apps version.\n     */\n    version: Version,\n    /**\n     * Supports method schema.\n     */\n    supportsSchema: Record<SupportsMethod, MiniAppsMethodName>,\n  ) {\n    this.supports = createSupportsFn(version, supportsSchema);\n  }\n\n  /**\n   * @returns True, if specified method is supported by the current component.\n   */\n  supports: SupportsFn<SupportsMethod>;\n}\n","import { createTypeError } from '../createTypeError.js';\nimport { ValueParser } from '../ValueParser/ValueParser.js';\nimport type { ArrayParserOfResult } from '../ArrayParser/types.js';\nimport type { AnyParser, Parser } from '../types.js';\nimport type { ValueParserParseResult } from '../ValueParser/types.js';\n\n/**\n * Parses incoming value as array.\n * @param value - value to parse.\n */\nfunction parseArray(value: unknown): unknown[] {\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    try {\n      const json = JSON.parse(value);\n\n      if (Array.isArray(json)) {\n        return json;\n      }\n    } catch {}\n  }\n  throw createTypeError();\n}\n\nexport class ArrayParser<ItemType, IsOptional extends boolean>\n  extends ValueParser<unknown[], IsOptional> {\n  private itemParser: Parser<any>;\n\n  constructor(\n    itemParser: AnyParser<ItemType>,\n    isOptional: IsOptional,\n    type?: string,\n  ) {\n    super(parseArray, isOptional, type);\n\n    this.itemParser = typeof itemParser === 'function'\n      ? itemParser\n      : itemParser.parse.bind(itemParser);\n  }\n\n  /**\n   * Attempts to parse passed value\n   * @param value - value to parse.\n   * @throws {SDKError} ERR_PARSE\n   * @see ERR_PARSE\n   */\n  override parse(value: unknown): ValueParserParseResult<ItemType[], IsOptional> {\n    const arr = super.parse(value);\n    return arr === undefined ? arr : arr.map(this.itemParser);\n  }\n\n  of<Item>(itemParser: AnyParser<Item>): ArrayParserOfResult<this, Item, IsOptional> {\n    this.itemParser = typeof itemParser === 'function'\n      ? itemParser\n      : itemParser.parse.bind(itemParser);\n\n    return this as ArrayParserOfResult<this, Item, IsOptional>;\n  }\n}\n","import { ArrayParser } from '@/parsing/ArrayParser/ArrayParser.js';\n\n/**\n * Parses incoming value as an array.\n * @param parserTypeName - parser type name.\n */\nexport function array(parserTypeName?: string): ArrayParser<unknown, false> {\n  return new ArrayParser((value) => value, false, parserTypeName);\n}\n","import { invokeCustomMethod } from '@/bridge/invokeCustomMethod.js';\nimport { WithSupports } from '@/classes/WithSupports.js';\nimport { array } from '@/parsing/parsers/array.js';\nimport { json } from '@/parsing/parsers/json.js';\nimport { string } from '@/parsing/parsers/string.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { CreateRequestIdFn } from '@/request-id/types.js';\nimport type { ExecuteWithTimeout } from '@/types/methods.js';\nimport type { Version } from '@/version/types.js';\n\nfunction objectFromKeys<K extends string, V>(keys: K[], value: V): Record<K, V> {\n  return Object.fromEntries(keys.map((k) => [k, value])) as Record<K, V>;\n}\n\n// TODO: Usage.\n\n/**\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/cloud-storage\n */\nexport class CloudStorage extends WithSupports<'delete' | 'get' | 'getKeys' | 'set'> {\n  constructor(\n    version: Version,\n    private readonly createRequestId: CreateRequestIdFn,\n    private readonly postEvent: PostEvent,\n  ) {\n    super(version, {\n      delete: 'web_app_invoke_custom_method',\n      get: 'web_app_invoke_custom_method',\n      getKeys: 'web_app_invoke_custom_method',\n      set: 'web_app_invoke_custom_method',\n    });\n  }\n\n  /**\n   * Deletes specified key or keys from the cloud storage.\n   * @param keyOrKeys - key or keys to delete.\n   * @param options - request execution options.\n   */\n  async delete(keyOrKeys: string | string[], options: ExecuteWithTimeout = {}): Promise<void> {\n    const keys = Array.isArray(keyOrKeys) ? keyOrKeys : [keyOrKeys];\n    if (keys.length) {\n      await invokeCustomMethod(\n        'deleteStorageValues',\n        { keys },\n        this.createRequestId(),\n        { ...options, postEvent: this.postEvent },\n      );\n    }\n  }\n\n  /**\n   * Returns list of all keys presented in the cloud storage.\n   * @param options - request execution options.\n   */\n  async getKeys(options: ExecuteWithTimeout = {}): Promise<string[]> {\n    return array().of(string()).parse(\n      await invokeCustomMethod(\n        'getStorageKeys',\n        {},\n        this.createRequestId(),\n        { ...options, postEvent: this.postEvent },\n      ),\n    );\n  }\n\n  /**\n   * Returns map, where key is one of the specified in keys argument, and value is according\n   * storage value.\n   * @param keys - keys list.\n   * @param options - request execution options.\n   */\n  get<K extends string>(keys: K[], options?: ExecuteWithTimeout): Promise<Record<K, string>>;\n\n  /**\n   * Returns value of the specified key.\n   * @param key - cloud storage key.\n   * @param options - request execution options.\n   * @return Value of the specified key. In case, key was not created previously, function\n   * will return empty string.\n   */\n  get(key: string, options?: ExecuteWithTimeout): Promise<string>;\n\n  async get(\n    keyOrKeys: string | string[],\n    options: ExecuteWithTimeout = {},\n  ): Promise<string | Record<string, string>> {\n    const keys = Array.isArray(keyOrKeys) ? keyOrKeys : [keyOrKeys];\n    if (!keys.length) {\n      return objectFromKeys(keys, '');\n    }\n\n    const data = await invokeCustomMethod(\n      'getStorageValues',\n      { keys },\n      this.createRequestId(),\n      { ...options, postEvent: this.postEvent },\n    );\n    const result = json(objectFromKeys(keys, string()), 'CloudStorageData').parse(data);\n\n    return Array.isArray(keyOrKeys) ? result : result[keyOrKeys];\n  }\n\n  /**\n   * Saves specified value by key.\n   * @param key - storage key.\n   * @param value - storage value.\n   * @param options - request execution options.\n   */\n  async set(key: string, value: string, options: ExecuteWithTimeout = {}): Promise<void> {\n    await invokeCustomMethod(\n      'saveStorageValue',\n      { key, value },\n      this.createRequestId(),\n      { ...options, postEvent: this.postEvent },\n    );\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { CloudStorage } from './CloudStorage.js';\n\n/**\n * @returns A new initialized instance of the `CloudStorage` class.\n * @see CloudStorage\n */\nexport const initCloudStorage = createComponentInitFn(\n  ({ createRequestId, postEvent, version }) => {\n    return new CloudStorage(version, createRequestId, postEvent);\n  },\n);\n","import { WithSupports } from '@/classes/WithSupports.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type {\n  ImpactHapticFeedbackStyle,\n  NotificationHapticFeedbackType,\n} from '@/bridge/methods/types/haptic.js';\nimport type { Version } from '@/version/types.js';\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/haptic-feedback\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/haptic-feedback\n */\nexport class HapticFeedback\n  extends WithSupports<'impactOccurred' | 'notificationOccurred' | 'selectionChanged'> {\n  constructor(version: Version, private readonly postEvent: PostEvent) {\n    super(version, {\n      impactOccurred: 'web_app_trigger_haptic_feedback',\n      notificationOccurred: 'web_app_trigger_haptic_feedback',\n      selectionChanged: 'web_app_trigger_haptic_feedback',\n    });\n  }\n\n  /**\n   * A method tells that an impact occurred. The Telegram app may play the\n   * appropriate haptics based on style value passed.\n   * @param style - impact style.\n   */\n  impactOccurred(style: ImpactHapticFeedbackStyle): void {\n    this.postEvent('web_app_trigger_haptic_feedback', {\n      type: 'impact',\n      impact_style: style,\n    });\n  }\n\n  /**\n   * A method tells that a task or action has succeeded, failed, or produced\n   * a warning. The Telegram app may play the appropriate haptics based on\n   * type value passed.\n   * @param type - notification type.\n   */\n  notificationOccurred(type: NotificationHapticFeedbackType): void {\n    this.postEvent('web_app_trigger_haptic_feedback', {\n      type: 'notification',\n      notification_type: type,\n    });\n  }\n\n  /**\n   * A method tells that the user has changed a selection. The Telegram app\n   * may play the appropriate haptics.\n   *\n   * Do not use this feedback when the user makes or confirms a selection;\n   * use it only when the selection changes.\n   */\n  selectionChanged(): void {\n    this.postEvent('web_app_trigger_haptic_feedback', { type: 'selection_change' });\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { HapticFeedback } from './HapticFeedback.js';\n\n/**\n * @returns A new initialized instance of the `HapticFeedback` class.\n * @see HapticFeedback\n */\nexport const initHapticFeedback = createComponentInitFn(\n  ({ version, postEvent }) => new HapticFeedback(version, postEvent),\n);\n","import type {\n  Chat,\n  ChatType,\n  InitDataParsed,\n  User,\n} from './types.js';\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/init-data\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/init-data\n */\nexport class InitData {\n  constructor(private readonly initData: InitDataParsed) {\n  }\n\n  /**\n   * @see InitDataParsed.authDate\n   */\n  get authDate(): Date {\n    return this.initData.authDate;\n  }\n\n  /**\n   * @see InitDataParsed.canSendAfter\n   */\n  get canSendAfter(): number | undefined {\n    return this.initData.canSendAfter;\n  }\n\n  /**\n   * Date after which it is allowed to call\n   * the [answerWebAppQuery](https://core.telegram.org/bots/api#answerwebappquery) method.\n   */\n  get canSendAfterDate(): Date | undefined {\n    const { canSendAfter } = this;\n\n    return canSendAfter\n      ? new Date(this.authDate.getTime() + canSendAfter * 1000)\n      : undefined;\n  }\n\n  /**\n   * @see InitDataParsed.chat\n   */\n  get chat(): Chat | undefined {\n    return this.initData.chat;\n  }\n\n  /**\n   * @see InitDataParsed.chatType\n   */\n  get chatType(): ChatType | undefined {\n    return this.initData.chatType;\n  }\n\n  /**\n   * @see InitDataParsed.chatInstance\n   */\n  get chatInstance(): string | undefined {\n    return this.initData.chatInstance;\n  }\n\n  /**\n   * @see InitDataParsed.hash\n   */\n  get hash(): string {\n    return this.initData.hash;\n  }\n\n  /**\n   * @see InitDataParsed.queryId\n   */\n  get queryId(): string | undefined {\n    return this.initData.queryId;\n  }\n\n  /**\n   * @see InitDataParsed.receiver\n   */\n  get receiver(): User | undefined {\n    return this.initData.receiver;\n  }\n\n  /**\n   * @see InitDataParsed.startParam\n   */\n  get startParam(): string | undefined {\n    return this.initData.startParam;\n  }\n\n  /**\n   * @see InitDataParsed.user\n   */\n  get user(): User | undefined {\n    return this.initData.user;\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { InitData } from './InitData.js';\n\n/**\n * @returns A new initialized instance of the `InitData` class or undefined.\n * @see InitData\n */\nexport const initInitData = createComponentInitFn(\n  ({ initData }) => (initData ? new InitData(initData) : undefined),\n);\n","import { initData } from './parsers/initData.js';\nimport type { InitDataParsed } from './types.js';\n\n/**\n * Parses incoming value as init data.\n * @param value - value to parse.\n */\nexport function parseInitData(value: unknown): InitDataParsed {\n  return initData().parse(value);\n}\n","import { request } from '@/bridge/request.js';\nimport { WithSupportsAndTrackableState } from '@/classes/WithSupportsAndTrackableState.js';\nimport type { InvoiceStatus } from '@/bridge/events/types.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { Version } from '@/version/types.js';\n\nimport type { InvoiceState } from './types.js';\n\n// TODO: Usage.\n\n/**\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/invoice\n */\nexport class Invoice extends WithSupportsAndTrackableState<InvoiceState, 'open'> {\n  constructor(\n    isOpened: boolean,\n    version: Version,\n    private readonly postEvent: PostEvent,\n  ) {\n    super({ isOpened }, version, { open: 'web_app_open_invoice' });\n  }\n\n  private set isOpened(value) {\n    this.set('isOpened', value);\n  }\n\n  /**\n   * True if invoice is currently opened.\n   */\n  get isOpened(): boolean {\n    return this.get('isOpened');\n  }\n\n  /**\n   * Opens an invoice using its slug.\n   * @param slug - invoice slug.\n   * @throws {Error} Invoice is already opened.\n   */\n  open(slug: string): Promise<InvoiceStatus>;\n\n  /**\n   * Opens an invoice using its url. It expects passing link in full format, with hostname \"t.me\".\n   * @param url - invoice URL.\n   * @param type - value type.\n   * @throws {Error} Invoice is already opened.\n   */\n  open(url: string, type: 'url'): Promise<InvoiceStatus>;\n\n  async open(urlOrSlug: string, type?: 'url'): Promise<InvoiceStatus> {\n    if (this.isOpened) {\n      throw new Error('Invoice is already opened');\n    }\n\n    let slug: string;\n    if (!type) {\n      slug = urlOrSlug;\n    } else {\n      const { hostname, pathname } = new URL(urlOrSlug, window.location.href);\n      if (hostname !== 't.me') {\n        throw new Error(`Incorrect hostname: ${hostname}`);\n      }\n\n      // Valid examples:\n      // \"/invoice/my-slug\"\n      // \"/$my-slug\"\n      const match = pathname.match(/^\\/(\\$|invoice\\/)([A-Za-z0-9\\-_=]+)$/);\n      if (!match) {\n        throw new Error('Link pathname has incorrect format. Expected to receive \"/invoice/{slug}\" or \"/${slug}\"');\n      }\n      [, , slug] = match;\n    }\n\n    this.isOpened = true;\n\n    try {\n      const result = await request({\n        method: 'web_app_open_invoice',\n        event: 'invoice_closed',\n        params: { slug },\n        postEvent: this.postEvent,\n        capture(data) {\n          return slug === data.slug;\n        },\n      });\n\n      return result.status;\n    } finally {\n      this.isOpened = false;\n    }\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { Invoice } from './Invoice.js';\n\n/**\n * @returns A new initialized instance of the `Invoice` class.\n * @see Invoice\n */\nexport const initInvoice = createComponentInitFn(\n  ({ version, postEvent }) => new Invoice(false, version, postEvent),\n);\n","import { off } from '@/bridge/events/listening/off.js';\nimport { on } from '@/bridge/events/listening/on.js';\nimport { WithStateUtils } from '@/classes/WithStateUtils.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { RGB } from '@/colors/types.js';\nimport type {\n  MainButtonEvents,\n  MainButtonParams,\n  MainButtonProps,\n  MainButtonState,\n} from '@/components/MainButton/types.js';\nimport type { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\n\ntype Emitter = EventEmitter<MainButtonEvents>;\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/main-button\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/main-button\n */\nexport class MainButton extends WithStateUtils<MainButtonState> {\n  private readonly postEvent: PostEvent;\n\n  constructor({ postEvent, ...rest }: MainButtonProps) {\n    super(rest);\n    this.postEvent = postEvent;\n  }\n\n  /**\n   * The MainButton background color.\n   */\n  get bgColor(): RGB {\n    return this.get('bgColor');\n  }\n\n  /**\n   * Sends current local state to the Telegram application.\n   */\n  private commit(): void {\n    // We should not commit changes until payload is correct. We could\n    // have some invalid values in case, button instance was created\n    // with empty values. Otherwise, an unexpected behavior could be received.\n    if (this.text === '') {\n      return;\n    }\n\n    this.postEvent('web_app_setup_main_button', {\n      is_visible: this.isVisible,\n      is_active: this.isEnabled,\n      is_progress_visible: this.isLoaderVisible,\n      text: this.text,\n      color: this.bgColor,\n      text_color: this.textColor,\n    });\n  }\n\n  /**\n   * Disables the MainButton.\n   * @see Does not work on Android: https://github.com/Telegram-Mini-Apps/issues/issues/1\n   */\n  disable(): this {\n    this.isEnabled = false;\n    return this;\n  }\n\n  /**\n   * Enables the MainButton.\n   */\n  enable(): this {\n    this.isEnabled = true;\n    return this;\n  }\n\n  /**\n   * Hides the MainButton.\n   */\n  hide(): this {\n    this.isVisible = false;\n    return this;\n  }\n\n  /**\n   * Hides the MainButton loading indicator.\n   */\n  hideLoader(): this {\n    this.isLoaderVisible = false;\n    return this;\n  }\n\n  private set isEnabled(isEnabled: boolean) {\n    this.setParams({ isEnabled });\n  }\n\n  /**\n   * True if the MainButton is enabled.\n   */\n  get isEnabled(): boolean {\n    return this.get('isEnabled');\n  }\n\n  private set isLoaderVisible(isLoaderVisible: boolean) {\n    this.setParams({ isLoaderVisible });\n  }\n\n  /**\n   * True if the MainButton loader is visible.\n   */\n  get isLoaderVisible(): boolean {\n    return this.get('isLoaderVisible');\n  }\n\n  private set isVisible(isVisible: boolean) {\n    this.setParams({ isVisible });\n  }\n\n  /**\n   * True if the MainButton is visible.\n   */\n  get isVisible(): boolean {\n    return this.get('isVisible');\n  }\n\n  /**\n   * Adds a new event listener.\n   * @param event - event to listen.\n   * @param listener - listener to add.\n   */\n  on: Emitter['on'] = (event, listener) => (\n    event === 'click'\n      ? on('main_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.on(event, listener as any)\n  );\n\n  /**\n   * Removes the event listener.\n   * @param event - event to listen.\n   * @param listener - listener to remove.\n   */\n  off: Emitter['off'] = (event, listener) => (\n    event === 'click'\n      ? off('main_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.off(event, listener as any)\n  );\n\n  /**\n   * Shows the MainButton.\n   *\n   * Note that opening the Mini App from the attachment menu hides the main button until the\n   * user interacts with the Mini App interface.\n   */\n  show(): this {\n    this.isVisible = true;\n    return this;\n  }\n\n  /**\n   * Shows a loading indicator on the Main Button.\n   */\n  showLoader(): this {\n    this.isLoaderVisible = true;\n    return this;\n  }\n\n  /**\n   * Sets a new MainButton text. Minimal length for the text is 1 symbol, and maximum is 64 symbols.\n   * @param text - a new text.\n   */\n  setText(text: string): this {\n    return this.setParams({ text });\n  }\n\n  /**\n   * Sets a new Main Button text color.\n   * @param textColor - new text color.\n   */\n  setTextColor(textColor: RGB): this {\n    return this.setParams({ textColor });\n  }\n\n  /**\n   * Updates current Main Button color.\n   * @param bgColor - color to set.\n   */\n  setBgColor(bgColor: RGB): this {\n    return this.setParams({ bgColor });\n  }\n\n  /**\n   * Allows setting multiple Main Button parameters.\n   * @param params - Main Button parameters.\n   */\n  setParams(params: Partial<MainButtonParams>): this {\n    this.set(params);\n    this.commit();\n    return this;\n  }\n\n  /**\n   * The MainButton text.\n   */\n  get text(): string {\n    return this.get('text');\n  }\n\n  /**\n   * The MainButton text color.\n   */\n  get textColor(): RGB {\n    return this.get('textColor');\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { MainButton } from './MainButton.js';\n\n/**\n * @returns A new initialized instance of the `MainButton` class.\n * @see MainButton\n */\nexport const initMainButton = createComponentInitFn(\n  'mainButton',\n  ({\n    postEvent,\n    themeParams,\n    state = {\n      isVisible: false,\n      isEnabled: false,\n      text: '',\n      isLoaderVisible: false,\n      textColor: themeParams.buttonTextColor || '#ffffff',\n      bgColor: themeParams.buttonColor || '#000000',\n    },\n  }) => new MainButton({ ...state, postEvent }),\n);\n","import { supports } from '@/supports/supports.js';\nimport type {\n  MiniAppsMethodVersionedParams,\n  MiniAppsMethodWithVersionedParams,\n} from '@/bridge/methods/types/methods.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { Version } from '@/version/types.js';\n\ntype HasCheckSupportMethodTuple = {\n  [M in MiniAppsMethodWithVersionedParams]: [M, MiniAppsMethodVersionedParams<M>]\n}[MiniAppsMethodWithVersionedParams];\n\n/**\n * Returns function, which accepts predefined method name and checks if it is supported\n * via passed schema and version.\n * @param schema - object which contains methods names and TWA methods with specified parameter\n * as a dependency.\n * @param version - platform version.\n */\nexport function createSupportsParamFn<Method extends string>(\n  version: Version,\n  schema: Record<Method, HasCheckSupportMethodTuple>,\n): SupportsFn<Method> {\n  return (method) => {\n    const [tmaMethod, param] = schema[method];\n\n    return supports(tmaMethod, param, version);\n  };\n}\n","/**\n * Awaits for specified amount of time.\n * @param duration - duration in ms to await.\n */\nexport function sleep(duration: number): Promise<void> {\n  return new Promise((res) => {\n    setTimeout(res, duration);\n  });\n}\n","import { invokeCustomMethod } from '@/bridge/invokeCustomMethod.js';\nimport { request } from '@/bridge/request.js';\nimport { WithSupportsAndTrackableState } from '@/classes/WithSupportsAndTrackableState.js';\nimport { isColorDark } from '@/colors/isColorDark.js';\nimport { isRGB } from '@/colors/isRGB.js';\nimport { contact } from '@/components/MiniApp/parsing/contact.js';\nimport { createSupportsParamFn } from '@/supports/createSupportsParamFn.js';\nimport { createTimeoutError } from '@/timeout/createTimeoutError.js';\nimport { sleep } from '@/timeout/sleep.js';\nimport { withTimeout } from '@/timeout/withTimeout.js';\nimport type { PhoneRequestedStatus, WriteAccessRequestedStatus } from '@/bridge/events/types.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { SwitchInlineQueryChatType } from '@/bridge/methods/types/methods.js';\nimport type { RGB } from '@/colors/types.js';\nimport type {\n  MiniAppHeaderColor,\n  MiniAppProps,\n  MiniAppState,\n  RequestedContact,\n} from '@/components/MiniApp/types.js';\nimport type { CreateRequestIdFn } from '@/request-id/types.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { ExecuteWithTimeout } from '@/types/methods.js';\n\n/**\n * Provides common Mini Apps functionality not covered by other system components.\n */\nexport class MiniApp extends WithSupportsAndTrackableState<\n  MiniAppState,\n  | 'requestPhoneAccess'\n  | 'requestWriteAccess'\n  | 'switchInlineQuery'\n  | 'setHeaderColor'\n  | 'setBackgroundColor'\n> {\n  private readonly botInline: boolean;\n\n  private readonly postEvent: PostEvent;\n\n  private readonly createRequestId: CreateRequestIdFn;\n\n  private requestPhoneAccessPromise: Promise<PhoneRequestedStatus> | undefined;\n\n  private requestWriteAccessPromise: Promise<WriteAccessRequestedStatus> | undefined;\n\n  constructor({ postEvent, createRequestId, version, botInline, ...rest }: MiniAppProps) {\n    super(rest, version, {\n      requestPhoneAccess: 'web_app_request_phone',\n      requestWriteAccess: 'web_app_request_write_access',\n      switchInlineQuery: 'web_app_switch_inline_query',\n      setHeaderColor: 'web_app_set_header_color',\n      setBackgroundColor: 'web_app_set_background_color',\n    });\n\n    this.createRequestId = createRequestId;\n    this.postEvent = postEvent;\n    this.botInline = botInline;\n\n    const supportsOriginal = this.supports.bind(this);\n    this.supports = (method) => {\n      if (!supportsOriginal(method)) {\n        return false;\n      }\n\n      // web_app_switch_inline_query requires a Mini App to be in inline mode, that's why we\n      // add 1 more check here.\n      return method !== 'switchInlineQuery' || botInline;\n    };\n\n    this.supportsParam = createSupportsParamFn(version, {\n      'setHeaderColor.color': ['web_app_set_header_color', 'color'],\n    });\n  }\n\n  /**\n   * Attempts to get requested contact.\n   * @param timeout - request timeout.\n   */\n  private async getRequestedContact({\n    timeout = 10000,\n  }: ExecuteWithTimeout = {}): Promise<RequestedContact> {\n    return contact().parse(\n      await invokeCustomMethod(\n        'getRequestedContact',\n        {},\n        this.createRequestId(),\n        { postEvent: this.postEvent, timeout },\n      ),\n    );\n  }\n\n  /**\n   * The Mini App background color.\n   * @example \"#ffaabb\"\n   */\n  get bgColor(): RGB {\n    return this.get('bgColor');\n  }\n\n  /**\n   * Closes the Mini App.\n   * @param returnBack - should the application be wrapped into the bottom bar.\n   */\n  close(returnBack?: boolean): void {\n    this.postEvent('web_app_close', { return_back: returnBack });\n  }\n\n  /**\n   * The Mini App header color.\n   * @example \"#ffaabb\"\n   * @example \"bg_color\"\n   */\n  get headerColor(): MiniAppHeaderColor {\n    return this.get('headerColor');\n  }\n\n  /**\n   * True if the Mini App is currently launched in bot inline mode.\n   */\n  get isBotInline(): boolean {\n    return this.botInline;\n  }\n\n  /**\n   * True if the current Mini App background color is recognized as dark.\n   */\n  get isDark(): boolean {\n    return isColorDark(this.bgColor);\n  }\n\n  /**\n   * Informs the Telegram app that the Mini App is ready to be displayed.\n   *\n   * It is recommended to call this method as early as possible, as soon as all essential\n   * interface elements loaded. Once this method called, the loading placeholder is hidden\n   * and the Mini App shown.\n   *\n   * If the method not called, the placeholder will be hidden only when the page fully loaded.\n   */\n  ready(): void {\n    this.postEvent('web_app_ready');\n  }\n\n  /**\n   * Requests current user contact information. In contrary to requestPhoneAccess, this method\n   * returns promise with contact information that rejects in case, user denied access, or request\n   * failed.\n   * @param options - additional options.\n   */\n  async requestContact({ timeout = 5000 }: ExecuteWithTimeout = {}): Promise<RequestedContact> {\n    // First of all, let's try to get the requested contact. Probably, we already requested\n    // it before.\n    try {\n      return await this.getRequestedContact();\n    } catch { /* empty */\n    }\n\n    // Then, request access to user's phone.\n    const status = await this.requestPhoneAccess();\n    if (status !== 'sent') {\n      throw new Error('Access denied.');\n    }\n\n    // Expected deadline.\n    const deadlineAt = Date.now() + timeout;\n\n    // Time to wait before executing the next request.\n    let sleepTime = 50;\n\n    // We are trying to retrieve the requested contact until deadline was reached.\n    return withTimeout(async () => {\n      while (Date.now() < deadlineAt) {\n        try {\n          return await this.getRequestedContact();\n        } catch {}\n\n        // Sleep for some time.\n        await sleep(sleepTime);\n\n        // Increase the sleep time not to kill the backend service.\n        sleepTime += 50;\n      }\n\n      throw createTimeoutError(timeout);\n    }, timeout);\n  }\n\n  /**\n   * Requests current user phone access. Method returns promise, which resolves\n   * status of the request. In case, user accepted the request, Mini App bot will receive\n   * the according notification.\n   *\n   * To obtain the retrieved information instead, utilize the `requestContact` method.\n   * @param options - additional options.\n   * @see requestContact\n   */\n  async requestPhoneAccess(options: ExecuteWithTimeout = {}): Promise<PhoneRequestedStatus> {\n    if (!this.requestPhoneAccessPromise) {\n      this.requestPhoneAccessPromise = request({\n        ...options,\n        method: 'web_app_request_phone',\n        event: 'phone_requested',\n        postEvent: this.postEvent,\n      })\n        .then(({ status }) => status)\n        .finally(() => this.requestPhoneAccessPromise = undefined);\n    }\n    return this.requestPhoneAccessPromise;\n  }\n\n  /**\n   * Requests write message access to current user.\n   * @param options - additional options.\n   */\n  async requestWriteAccess(options: ExecuteWithTimeout = {}): Promise<WriteAccessRequestedStatus> {\n    if (!this.requestWriteAccessPromise) {\n      this.requestWriteAccessPromise = request({\n        ...options,\n        method: 'web_app_request_write_access',\n        event: 'write_access_requested',\n        postEvent: this.postEvent,\n      })\n        .then(({ status }) => status)\n        .finally(() => this.requestWriteAccessPromise = undefined);\n    }\n    return this.requestWriteAccessPromise;\n  }\n\n  /**\n   * A method used to send data to the bot. When this method called, a service message sent to\n   * the bot containing the data of the length up to 4096 bytes, and the Mini App closed. See the\n   * field `web_app_data` in the class [Message](https://core.telegram.org/bots/api#message).\n   *\n   * This method is only available for Mini Apps launched via a Keyboard button.\n   * @param data - data to send to bot.\n   * @throws {Error} data has incorrect size.\n   */\n  sendData(data: string): void {\n    const { size } = new Blob([data]);\n    if (!size || size > 4096) {\n      throw new Error(`Passed data has incorrect size: ${size}`);\n    }\n    this.postEvent('web_app_data_send', { data });\n  }\n\n  /**\n   * Updates current Mini App header color.\n   *\n   * @see No effect on desktop: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/9\n   * @see Works incorrectly in Android: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/8\n   * @param color - color key or RGB color.\n   */\n  setHeaderColor(color: MiniAppHeaderColor): void {\n    this.postEvent('web_app_set_header_color', isRGB(color) ? { color } : { color_key: color });\n    this.set('headerColor', color);\n  }\n\n  /**\n   * Updates current Mini App background color.\n   *\n   * @see No effect on desktop: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/9\n   * @see Works incorrectly in Android: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/8\n   * @param color - RGB color.\n   */\n  setBgColor(color: RGB): void {\n    this.postEvent('web_app_set_background_color', { color });\n    this.set('bgColor', color);\n  }\n\n  /**\n   * Checks if specified method parameter is supported by current component.\n   */\n  supportsParam: SupportsFn<'setHeaderColor.color'>;\n\n  /**\n   * Inserts the bot's username and the specified inline query in the current chat's input field.\n   * Query may be empty, in which case only the bot's username will be inserted. The client prompts\n   * the user to choose a specific chat, then opens that chat and inserts the bot's username and\n   * the specified inline query in the input field.\n   * @param text - text which should be inserted in the input after the current bot name. Max\n   * length is 256 symbols.\n   * @param chatTypes - List of chat types which could be chosen to send the message. Could be\n   * empty list.\n   */\n  switchInlineQuery(text: string, chatTypes: SwitchInlineQueryChatType[] = []): void {\n    if (!this.supports('switchInlineQuery') && !this.isBotInline) {\n      throw new Error('Method is unsupported because Mini App should be launched in inline mode.');\n    }\n    this.postEvent('web_app_switch_inline_query', { query: text, chat_types: chatTypes });\n  }\n}\n","import { date } from '@/parsing/parsers/date.js';\nimport { json } from '@/parsing/parsers/json.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { searchParams } from '@/parsing/parsers/searchParams.js';\nimport { string } from '@/parsing/parsers/string.js';\nimport type { ValueParser } from '@/parsing/ValueParser/ValueParser.js';\n\nimport type { RequestedContact } from '../types.js';\n\n/**\n * Returns function which parses incoming value as a contact information.\n */\nexport function contact(): ValueParser<RequestedContact, false> {\n  return searchParams({\n    contact: json({\n      userId: {\n        type: number(),\n        from: 'user_id',\n      },\n      phoneNumber: {\n        type: string(),\n        from: 'phone_number',\n      },\n      firstName: {\n        type: string(),\n        from: 'first_name',\n      },\n      lastName: {\n        type: string().optional(),\n        from: 'last_name',\n      },\n    }),\n    authDate: {\n      type: date(),\n      from: 'auth_date',\n    },\n    hash: string(),\n  }, 'RequestedContact');\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { MiniApp } from './MiniApp.js';\n\n/**\n * @returns A new initialized instance of the `MiniApp` class.\n * @see MiniApp\n */\nexport const initMiniApp = createComponentInitFn(\n  'miniApp',\n  ({\n    themeParams,\n    botInline = false,\n    state = {\n      bgColor: themeParams.bgColor || '#ffffff',\n      headerColor: themeParams.headerBgColor || '#000000',\n    },\n    ...rest\n  }) => new MiniApp({ ...rest, ...state, botInline }),\n);\n","import type { PopupButton, PopupParams as BridgePopupParams } from '@/bridge/methods/types/popup.js';\n\nimport type { OpenPopupOptions } from './types.js';\n\n/**\n * Prepares popup parameters before sending them to native app.\n * @param params - popup parameters.\n */\nexport function preparePopupParams(params: OpenPopupOptions): BridgePopupParams {\n  const message = params.message.trim();\n  const title = (params.title || '').trim();\n  const buttons = params.buttons || [];\n  let preparedButtons: PopupButton[];\n\n  // Check title.\n  if (title.length > 64) {\n    throw new Error(`Title has incorrect size: ${title.length}`);\n  }\n\n  // Check message.\n  if (!message.length || message.length > 256) {\n    throw new Error(`Message has incorrect size: ${message.length}`);\n  }\n\n  // Check buttons.\n  if (buttons.length > 3) {\n    throw new Error(`Buttons have incorrect size: ${buttons.length}`);\n  }\n\n  // Append button in case, there are no buttons passed.\n  if (!buttons.length) {\n    preparedButtons = [{ type: 'close', id: '' }];\n  } else {\n    // Otherwise, check all the buttons.\n    preparedButtons = buttons.map((b) => {\n      const { id = '' } = b;\n\n      // Check button ID.\n      if (id.length > 64) {\n        throw new Error(`Button ID has incorrect size: ${id}`);\n      }\n\n      if (!b.type || b.type === 'default' || b.type === 'destructive') {\n        const text = b.text.trim();\n\n        if (!text.length || text.length > 64) {\n          const type = b.type || 'default';\n\n          throw new Error(`Button text with type \"${type}\" has incorrect size: ${b.text.length}`);\n        }\n\n        return { ...b, text, id };\n      }\n\n      return { ...b, id };\n    });\n  }\n  return { title, message, buttons: preparedButtons };\n}\n","import { request } from '@/bridge/request.js';\nimport { WithSupportsAndTrackableState } from '@/classes/WithSupportsAndTrackableState.js';\nimport { preparePopupParams } from '@/components/Popup/preparePopupParams.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { OpenPopupOptions, PopupState } from '@/components/Popup/types.js';\nimport type { Version } from '@/version/types.js';\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/popup\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/popup\n */\nexport class Popup extends WithSupportsAndTrackableState<PopupState, 'open'> {\n  constructor(isOpened: boolean, version: Version, private readonly postEvent: PostEvent) {\n    super({ isOpened }, version, { open: 'web_app_open_popup' });\n  }\n\n  private set isOpened(value) {\n    this.set('isOpened', value);\n  }\n\n  /**\n   * True if the Popup is opened.\n   */\n  get isOpened(): boolean {\n    return this.get('isOpened');\n  }\n\n  /**\n   * A method that shows a native popup described by the `params` argument.\n   * Promise will be resolved when popup is closed. Resolved value will have\n   * an identifier of pressed button.\n   *\n   * In case, user clicked outside the popup or clicked top right popup close\n   * button, null will be returned.\n   *\n   * @param options - popup parameters.\n   * @throws {Error} Popup is already opened.\n   */\n  async open(options: OpenPopupOptions): Promise<string | null> {\n    if (this.isOpened) {\n      throw new Error('Popup is already opened.');\n    }\n\n    this.isOpened = true;\n\n    try {\n      const { button_id: buttonId = null } = await request({\n        event: 'popup_closed',\n        method: 'web_app_open_popup',\n        postEvent: this.postEvent,\n        params: preparePopupParams(options),\n      });\n      return buttonId;\n    } finally {\n      this.isOpened = false;\n    }\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { Popup } from './Popup.js';\n\n/**\n * @returns A new initialized instance of the `Popup` class.\n * @see Popup\n */\nexport const initPopup = createComponentInitFn(\n  ({ postEvent, version }) => new Popup(false, version, postEvent),\n);\n","import { request } from '@/bridge/request.js';\nimport { WithSupportsAndTrackableState } from '@/classes/WithSupportsAndTrackableState.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { Version } from '@/version/types.js';\n\nimport { QRScannerOpenOptions, QRScannerState } from './types.js';\n\n// TODO: Usage\n\n/**\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/qr-scanner\n */\nexport class QRScanner extends WithSupportsAndTrackableState<QRScannerState, 'close' | 'open'> {\n  constructor(isOpened: boolean, version: Version, private readonly postEvent: PostEvent) {\n    super({ isOpened }, version, {\n      close: 'web_app_close_scan_qr_popup',\n      open: 'web_app_open_scan_qr_popup',\n    });\n  }\n\n  /**\n   * Closes the scanner.\n   */\n  close(): void {\n    this.postEvent('web_app_close_scan_qr_popup');\n    this.isOpened = false;\n  }\n\n  private set isOpened(value) {\n    this.set('isOpened', value);\n  }\n\n  /**\n   * Returns true if the scanner is currently opened.\n   */\n  get isOpened(): boolean {\n    return this.get('isOpened');\n  }\n\n  /**\n   * Opens the scanner with the specified title shown to user.\n   * The method returns a promise with a scanned QR content and null if the scanner was closed.\n   * @param options - method options.\n   */\n  async open(options?: QRScannerOpenOptions): Promise<string | null>;\n  /**\n   * Opens the scanner with the specified title shown to user.\n   * The method returns a promise with a scanned QR content and null if the scanner was closed.\n   * @param text - title to display.\n   */\n  async open(text?: string): Promise<string | null>;\n  async open(textOrOptions?: QRScannerOpenOptions | string): Promise<string | null> {\n    if (this.isOpened) {\n      throw new Error('The scanner is already opened');\n    }\n\n    const { text, capture }: QRScannerOpenOptions = (\n      typeof textOrOptions === 'string'\n        ? { text: textOrOptions }\n        : textOrOptions\n    ) || {};\n    this.isOpened = true;\n\n    try {\n      const result = await request({\n        method: 'web_app_open_scan_qr_popup',\n        event: ['qr_text_received', 'scan_qr_popup_closed'],\n        postEvent: this.postEvent,\n        params: { text },\n        capture(ev) {\n          return ev.event === 'scan_qr_popup_closed' || !capture || capture(ev.payload);\n        },\n      }) || {};\n\n      const qr = result.data || null;\n      if (qr) {\n        this.close();\n      }\n      return qr;\n    } finally {\n      this.isOpened = false;\n    }\n  }\n\n  // TODO: Streaming mode, allowing to scan several QRs until closed.\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { QRScanner } from './QRScanner.js';\n\n/**\n * @returns A new initialized instance of the `QRScanner` class.\n * @see QRScanner\n */\nexport const initQRScanner = createComponentInitFn(\n  ({ version, postEvent }) => new QRScanner(false, version, postEvent),\n);\n","import { off } from '@/bridge/events/listening/off.js';\nimport { on } from '@/bridge/events/listening/on.js';\nimport { WithSupportsAndStateUtils } from '@/classes/WithSupportsAndStateUtils.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type {\n  SettingsButtonEvents,\n  SettingsButtonState,\n} from '@/components/SettingsButton/types.js';\nimport type { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport type { Version } from '@/version/types.js';\n\ntype Emitter = EventEmitter<SettingsButtonEvents>;\n\nexport class SettingsButton extends WithSupportsAndStateUtils<SettingsButtonState, 'show' | 'hide'> {\n  constructor(isVisible: boolean, version: Version, private readonly postEvent: PostEvent) {\n    super({ isVisible }, version, {\n      show: 'web_app_setup_settings_button',\n      hide: 'web_app_setup_settings_button',\n    });\n  }\n\n  private set isVisible(visible: boolean) {\n    this.set('isVisible', visible);\n    this.postEvent('web_app_setup_settings_button', { is_visible: visible });\n  }\n\n  /**\n   * True if the SettingsButton is visible.\n   */\n  get isVisible(): boolean {\n    return this.get('isVisible');\n  }\n\n  /**\n   * Hides the SettingsButton.\n   */\n  hide(): void {\n    this.isVisible = false;\n  }\n\n  /**\n   * Adds a new event listener.\n   * @param event - event to listen.\n   * @param listener - listener to add.\n   */\n  on: Emitter['on'] = (event, listener) => (\n    event === 'click'\n      ? on('settings_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.on(event, listener as any)\n  );\n\n  /**\n   * Removes the event listener.\n   * @param event - event to listen.\n   * @param listener - listener to remove.\n   */\n  off: Emitter['off'] = (event, listener) => (\n    event === 'click'\n      ? off('settings_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.off(event, listener as any)\n  );\n\n  /**\n   * Shows the SettingsButton.\n   */\n  show(): void {\n    this.isVisible = true;\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { SettingsButton } from './SettingsButton.js';\n\n/**\n * @returns A new initialized instance of the `SettingsButton` class.\n * @see SettingsButton\n */\nexport const initSettingsButton = createComponentInitFn(\n  'settingsButton',\n  ({\n    version,\n    postEvent,\n    state = { isVisible: false },\n  }) => new SettingsButton(state.isVisible, version, postEvent),\n);\n","import { themeParams } from '@/components/ThemeParams/parsing/themeParams.js';\n\nimport type { ThemeParamsParsed } from '../types.js';\n\n/**\n * Parses incoming value as theme parameters.\n * @param value - value to parse.\n */\nexport function parseThemeParams(value: unknown): ThemeParamsParsed {\n  return themeParams().parse(value);\n}\n","import { on } from '@/bridge/events/listening/on.js';\nimport { WithTrackableState } from '@/classes/WithTrackableState.js';\nimport { isColorDark } from '@/colors/isColorDark.js';\nimport type { RGB } from '@/colors/types.js';\nimport type { RemoveEventListenerFn } from '@/events/types.js';\n\nimport { parseThemeParams } from './parsing/parseThemeParams.js';\nimport type { ThemeParamsParsed, ThemeParamsState } from './types.js';\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/theming\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/theme-params\n */\nexport class ThemeParams extends WithTrackableState<ThemeParamsState> {\n  /**\n   * @since v6.10\n   */\n  get accentTextColor(): RGB | undefined {\n    return this.get('accentTextColor');\n  }\n\n  get bgColor(): RGB | undefined {\n    return this.get('bgColor');\n  }\n\n  get buttonColor(): RGB | undefined {\n    return this.get('buttonColor');\n  }\n\n  get buttonTextColor(): RGB | undefined {\n    return this.get('buttonTextColor');\n  }\n\n  get destructiveTextColor(): RGB | undefined {\n    return this.get('destructiveTextColor');\n  }\n\n  /**\n   * Returns the copy of the internal state of the current component instance.\n   */\n  getState(): ThemeParamsParsed {\n    return this.clone();\n  }\n\n  /**\n   * @since v6.10\n   */\n  get headerBgColor(): RGB | undefined {\n    return this.get('headerBgColor');\n  }\n\n  get hintColor(): RGB | undefined {\n    return this.get('hintColor');\n  }\n\n  /**\n   * @returns True in case, current color scheme is recognized as dark. This\n   * value is calculated according to theme bg color.\n   */\n  get isDark(): boolean {\n    return !this.bgColor || isColorDark(this.bgColor);\n  }\n\n  get linkColor(): RGB | undefined {\n    return this.get('linkColor');\n  }\n\n  get secondaryBgColor(): RGB | undefined {\n    return this.get('secondaryBgColor');\n  }\n\n  /**\n   * @since v6.10\n   */\n  get sectionBgColor(): RGB | undefined {\n    return this.get('sectionBgColor');\n  }\n\n  /**\n   * @since v6.10\n   */\n  get sectionHeaderTextColor(): RGB | undefined {\n    return this.get('sectionHeaderTextColor');\n  }\n\n  /**\n   * @since v7.6\n   */\n  get sectionSeparatorColor(): RGB | undefined {\n    return this.get('sectionHeaderTextColor');\n  }\n\n  /**\n   * Starts listening to the external theme changes and applies them.\n   * @returns Function to stop listening.\n   */\n  listen(): RemoveEventListenerFn {\n    return on('theme_changed', (event) => {\n      this.set(parseThemeParams(event.theme_params));\n    });\n  }\n\n  /**\n   * @since v6.10\n   */\n  get subtitleTextColor(): RGB | undefined {\n    return this.get('subtitleTextColor');\n  }\n\n  get textColor(): RGB | undefined {\n    return this.get('textColor');\n  }\n}\n","import { ThemeParams } from '@/components/ThemeParams/ThemeParams.js';\nimport { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\n/**\n * @returns A new initialized instance of the `ThemeParams` class.\n * @see ThemeParams\n */\nexport const initThemeParams = createComponentInitFn(\n  'themeParams',\n  ({ themeParams, state = themeParams, addCleanup }) => {\n    const tp = new ThemeParams(state);\n    addCleanup(tp.listen());\n    return tp;\n  },\n);\n","import { request } from '@/bridge/request.js';\nimport type { ExecuteWithOptions } from '@/types/index.js';\n\nimport { parseThemeParams } from './parsing/parseThemeParams.js';\nimport type { ThemeParamsParsed } from './types.js';\n\n/**\n * Requests current theme parameters from the Telegram application.\n * @param options - request options.\n */\nexport function requestThemeParams(options: ExecuteWithOptions = {}): Promise<ThemeParamsParsed> {\n  return request({\n    ...options,\n    method: 'web_app_request_theme',\n    event: 'theme_changed',\n  }).then(parseThemeParams);\n}\n","/**\n * Ensures, that specified value starts with the specified prefix. If it doesn't, function appends\n * prefix.\n * @param value - value to check.\n * @param prefix - prefix to add.\n */\nexport function ensurePrefix(value: string, prefix: string): string {\n  return value.startsWith(prefix) ? value : `${prefix}${value}`;\n}\n","import { ensurePrefix } from '@/navigation/ensurePrefix.js';\nimport type { URLLike } from '@/navigation/BrowserNavigator/types.js';\n\n/**\n * Safely creates new instance of URL with some predefined protocol and hostname.\n * @param urlOrPath - URL instance or path.\n */\nexport function createSafeURL(urlOrPath: string | Partial<URLLike>): URL {\n  return new URL(\n    typeof urlOrPath === 'string'\n      ? urlOrPath\n      : `${urlOrPath.pathname || ''}${ensurePrefix(urlOrPath.search || '', '?')}${ensurePrefix(urlOrPath.hash || '', '#')}`,\n    'http://a',\n  );\n}\n","import { captureSameReq } from '@/bridge/captureSameReq.js';\nimport { request } from '@/bridge/request.js';\nimport { WithSupports } from '@/classes/WithSupports.js';\nimport { createSupportsParamFn } from '@/supports/createSupportsParamFn.js';\nimport { supports } from '@/supports/supports.js';\nimport { createSafeURL } from '@/navigation/createSafeURL.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { CreateRequestIdFn } from '@/request-id/types.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { Version } from '@/version/types.js';\n\nexport interface UtilsOpenLinkOptions {\n  /**\n   * Attempts to use the instant view mode.\n   */\n  tryInstantView?: boolean;\n  /**\n   * Attempts to use user preferred browser.\n   */\n  tryBrowser?: boolean;\n}\n\n/**\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/utils\n */\nexport class Utils extends WithSupports<'readTextFromClipboard'> {\n  constructor(\n    private readonly version: Version,\n    private readonly createRequestId: CreateRequestIdFn,\n    private readonly postEvent: PostEvent,\n  ) {\n    super(version, { readTextFromClipboard: 'web_app_read_text_from_clipboard' });\n\n    this.supportsParam = createSupportsParamFn(version, {\n      'openLink.tryInstantView': ['web_app_open_link', 'try_instant_view'],\n    });\n  }\n\n  /**\n   * Opens a link.\n   *\n   * The Mini App will not be closed.\n   *\n   * Note that this method can be called only in response to the user\n   * interaction with the Mini App interface (e.g. click inside the Mini App or on the main button).\n   * @param url - URL to be opened.\n   * @param options - additional options.\n   */\n  openLink(url: string, options?: UtilsOpenLinkOptions): void;\n\n  /**\n   * Opens a link.\n   *\n   * The Mini App will not be closed.\n   *\n   * Note that this method can be called only in response to the user\n   * interaction with the Mini App interface (e.g. click inside the Mini App or on the main button).\n   * @param url - URL to be opened.\n   * @param tryInstantView - try to use the instant view.\n   * @deprecated Use the second argument as an object.\n   */\n  openLink(url: string, tryInstantView?: boolean): void\n\n  openLink(url: string, instantOrOptions?: boolean | UtilsOpenLinkOptions): void {\n    const formattedUrl = createSafeURL(url).toString();\n\n    // If the method is not supported, we are doing it in legacy way.\n    if (!supports('web_app_open_link', this.version)) {\n      window.open(formattedUrl, '_blank');\n      return;\n    }\n\n    const options: UtilsOpenLinkOptions = typeof instantOrOptions === 'boolean'\n      ? { tryInstantView: instantOrOptions }\n      : instantOrOptions || {};\n\n    // Otherwise, do it normally.\n    this.postEvent('web_app_open_link', {\n      url: formattedUrl,\n      try_browser: options.tryBrowser,\n      try_instant_view: options.tryInstantView,\n    });\n  }\n\n  /**\n   * Opens a Telegram link inside Telegram app. The Mini App will be closed. It expects passing\n   * link in full format, with hostname \"t.me\".\n   * @param url - URL to be opened.\n   * @throws {Error} URL has not allowed hostname.\n   */\n  openTelegramLink(url: string): void {\n    const { hostname, pathname, search } = new URL(url, 'https://t.me');\n    if (hostname !== 't.me') {\n      throw new Error(`URL has not allowed hostname: ${hostname}. Only \"t.me\" is allowed`);\n    }\n\n    if (!supports('web_app_open_tg_link', this.version)) {\n      window.location.href = url;\n      return;\n    }\n\n    this.postEvent('web_app_open_tg_link', { path_full: pathname + search });\n  }\n\n  /**\n   * Reads text from clipboard and returns string or null. null is returned\n   * in cases:\n   * - Value in clipboard is not text\n   * - Access to clipboard is not allowed\n   */\n  async readTextFromClipboard(): Promise<string | null> {\n    const reqId = this.createRequestId();\n    const {\n      data = null,\n    } = await request({\n      method: 'web_app_read_text_from_clipboard',\n      event: 'clipboard_text_received',\n      postEvent: this.postEvent,\n      params: { req_id: reqId },\n      capture: captureSameReq(reqId),\n    });\n\n    return data;\n  }\n\n  /**\n   * Shares specified URL with the passed to the chats, selected by user. After being called,\n   * it closes the mini application.\n   *\n   * This method uses Telegram's Share Links.\n   * @param url - URL to share.\n   * @param text - text to append after the URL.\n   * @see https://core.telegram.org/api/links#share-links\n   * @see https://core.telegram.org/widgets/share#custom-buttons\n   */\n  shareURL(url: string, text?: string): void {\n    this.openTelegramLink(\n      `https://t.me/share/url?` + new URLSearchParams({ url, text: text || '' })\n        .toString()\n        // By default, URL search params encode spaces with \"+\".\n        // We are replacing them with \"%20\", because plus symbols are working incorrectly\n        // in Telegram.\n        .replace(/\\+/g, '%20'),\n    );\n  }\n\n  /**\n   * Checks if specified method parameter is supported by current component.\n   */\n  supportsParam: SupportsFn<'openLink.tryInstantView'>;\n}\n","import { Utils } from '@/components/Utils/Utils.js';\nimport { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\n/**\n * @returns A new initialized instance of the `Utils` class.\n * @see Utils\n */\nexport const initUtils = createComponentInitFn(\n  ({ version, postEvent, createRequestId }) => {\n    return new Utils(version, createRequestId, postEvent);\n  },\n);\n","import { request } from '@/bridge/request.js';\nimport type { ExecuteWithOptions } from '@/types/index.js';\n\nexport interface RequestViewportResult {\n  height: number;\n  isStateStable: boolean;\n  isExpanded: boolean;\n  width: number;\n}\n\n/**\n * Requests viewport actual information from the Telegram application.\n * @param options - request options.\n */\nexport async function requestViewport(\n  options: ExecuteWithOptions = {},\n): Promise<RequestViewportResult> {\n  const {\n    is_expanded: isExpanded,\n    is_state_stable: isStateStable,\n    ...rest\n  } = await request({\n    ...options,\n    method: 'web_app_request_viewport',\n    event: 'viewport_changed',\n  });\n\n  return { ...rest, isExpanded, isStateStable };\n}\n","import { on } from '@/bridge/events/listening/on.js';\nimport { WithTrackableState } from '@/classes/WithTrackableState.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { RemoveEventListenerFn } from '@/events/types.js';\nimport type { ExecuteWithOptions } from '@/types/index.js';\n\nimport { requestViewport } from './requestViewport.js';\nimport type { ViewportProps, ViewportState } from './types.js';\n\n/**\n * Formats value to make it stay in bounds [0, +Inf).\n * @param value - value to format.\n */\nfunction truncate(value: number): number {\n  return value < 0 ? 0 : value;\n}\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/viewport\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/viewport\n */\nexport class Viewport extends WithTrackableState<ViewportState> {\n  private readonly postEvent: PostEvent;\n\n  constructor({ postEvent, stableHeight, height, width, isExpanded }: ViewportProps) {\n    super({\n      height: truncate(height),\n      isExpanded,\n      stableHeight: truncate(stableHeight),\n      width: truncate(width),\n    });\n    this.postEvent = postEvent;\n  }\n\n  /**\n   * Requests viewport information from the Telegram application and updates current Viewport\n   * instance.\n   * @param options - options to request fresh data.\n   */\n  async sync(options?: ExecuteWithOptions): Promise<void> {\n    const { isStateStable, ...rest } = await requestViewport(options);\n    this.set({\n      ...rest,\n      stableHeight: isStateStable ? rest.height : this.get('stableHeight'),\n    });\n  }\n\n  /**\n   * The current height of the **visible area** of the Mini App.\n   *\n   * The application can display just the top part of the Mini App, with its lower part remaining\n   * outside the screen area. From this position, the user can \"pull\" the Mini App to its\n   * maximum height, while the bot can do the same by calling `expand` method. As the position of\n   * the Mini App changes, the current height value of the visible area will be updated  in real\n   * time.\n   *\n   * Please note that the refresh rate of this value is not sufficient to smoothly follow the\n   * lower border of the window. It should not be used to pin interface elements to the bottom\n   * of the visible area. It's more appropriate to use the value of the `stableHeight`\n   * field for this purpose.\n   *\n   * @see stableHeight\n   */\n  get height(): number {\n    return this.get('height');\n  }\n\n  /**\n   * The height of the visible area of the Mini App in its last stable state.\n   *\n   * The application can display just the top part of the Mini App, with its lower part remaining\n   * outside the screen area. From this position, the user can \"pull\" the Mini App to its\n   * maximum height, while the application can do the same by calling `expand` method.\n   *\n   * Unlike the value of `height`, the value of `stableHeight` does not change as the position\n   * of the Mini App changes with user gestures or during animations. The value of `stableHeight`\n   * will be updated after all gestures and animations are completed and\n   * the Mini App reaches its final size.\n   *\n   * @see height\n   */\n  get stableHeight(): number {\n    return this.get('stableHeight');\n  }\n\n  /**\n   * Starts listening to viewport changes and applies them.\n   * @returns Function to stop listening.\n   */\n  listen(): RemoveEventListenerFn {\n    return on('viewport_changed', (event) => {\n      const {\n        height,\n        width,\n        is_expanded: isExpanded,\n        is_state_stable: isStateStable,\n      } = event;\n      const truncatedHeight = truncate(height);\n\n      this.set({\n        height: truncatedHeight,\n        isExpanded,\n        width: truncate(width),\n        ...(isStateStable ? { stableHeight: truncatedHeight } : {}),\n      });\n    });\n  }\n\n  /**\n   * True if the Mini App is expanded to the maximum available height. Otherwise, if\n   * the Mini App occupies part of the screen and can be expanded to the full height using\n   * `expand` method.\n   * @see expand\n   */\n  get isExpanded(): boolean {\n    return this.get('isExpanded');\n  }\n\n  /**\n   * Current visible area width.\n   */\n  get width(): number {\n    return this.get('width');\n  }\n\n  /**\n   * A method that expands the Mini App to the maximum available height. To find out if the Mini\n   * App is expanded to the maximum height, refer to the value of the `isExpanded`.\n   * @see isExpanded\n   */\n  expand(): void {\n    this.postEvent('web_app_expand');\n    this.set('isExpanded', true);\n  }\n\n  /**\n   * True if the current viewport height is stable and is not going to change in the next moment.\n   */\n  get isStable(): boolean {\n    return this.stableHeight === this.height;\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { Viewport } from './Viewport.js';\nimport { requestViewport } from '@/components/Viewport/requestViewport.js';\n\n/**\n * @returns A promise with a new initialized instance of the `Viewport` class.\n * @see Viewport\n */\nexport const initViewport = createComponentInitFn(\n  'viewport',\n  async ({ state, platform, postEvent, addCleanup }) => {\n    let isExpanded = false;\n    let height = 0;\n    let width = 0;\n    let stableHeight = 0;\n\n    // State was saved previously, we restore the Viewport from this state.\n    if (state) {\n      isExpanded = state.isExpanded;\n      height = state.height;\n      width = state.width;\n      stableHeight = state.stableHeight;\n    } else if (['macos', 'tdesktop', 'unigram', 'webk', 'weba', 'web'].includes(platform)) {\n      // If platform has a stable viewport, it means we could instantiate Viewport using\n      // the window global object properties.\n      isExpanded = true;\n      height = window.innerHeight;\n      width = window.innerWidth;\n      stableHeight = window.innerHeight;\n    } else {\n      // We were unable to retrieve data locally. In this case we are sending a request returning\n      // a viewport information.\n      const response = await requestViewport({ timeout: 1000, postEvent });\n      isExpanded = response.isExpanded;\n      height = response.height;\n      width = response.width;\n      stableHeight = response.isStateStable ? height : 0;\n    }\n\n    // Otherwise, Viewport instance will be created using zero values.\n    const viewport = new Viewport({\n      postEvent,\n      height,\n      width,\n      stableHeight,\n      isExpanded,\n    });\n\n    // Listen to the viewport external changes and actualize local instance.\n    addCleanup(viewport.listen());\n\n    return viewport;\n  },\n);\n","/**\n * Sets CSS variable globally.\n * @param name - variable name.\n * @param value - variable value.\n */\nexport function setCSSVar(name: string, value: string): void {\n  document.documentElement.style.setProperty(name, value);\n}\n","import { isRGB } from '@/colors/isRGB.js';\nimport { setCSSVar } from '@/css-vars/setCSSVar.js';\nimport type { ThemeParams } from '@/components/ThemeParams/ThemeParams.js';\nimport type { MiniApp } from '@/components/MiniApp/MiniApp.js';\nimport type { CleanupFn } from '@/types/index.js';\n\nexport interface GetMiniAppCSSVarNameFn {\n  /**\n   * @param property - MiniApp property.\n   * @returns Computed complete CSS variable name.\n   */\n  (property: 'bg' | 'header'): string;\n}\n\n/**\n * Creates CSS variables connected with the MiniApps class instance background and header colors\n * based on the passed MiniApp and ThemeParams instances.\n *\n * Created variables by default:\n * - `--tg-bg-color`\n * - `--tg-header-color`\n *\n * Variables are being automatically updated in case, corresponding MiniApp and ThemeParams\n * properties were updated.\n *\n * @param miniApp - MiniApp instance.\n * @param themeParams - ThemeParams instance.\n * @param getVarName - function, returning complete CSS variable name for the specified\n * MiniApp property.\n * @returns Function to stop updating variables.\n */\nexport function bindMiniAppCSSVars(\n  miniApp: MiniApp,\n  themeParams: ThemeParams,\n  getVarName?: GetMiniAppCSSVarNameFn,\n): CleanupFn {\n  getVarName ||= (property) => `--tg-${property}-color`;\n\n  const headerVar = getVarName('header');\n  const bgVar = getVarName('bg');\n\n  const actualize = () => {\n    const { headerColor } = miniApp;\n\n    if (isRGB(headerColor)) {\n      setCSSVar(headerVar, headerColor);\n    } else {\n      const { bgColor, secondaryBgColor } = themeParams;\n\n      if (headerColor === 'bg_color' && bgColor) {\n        setCSSVar(headerVar, bgColor);\n      } else if (headerColor === 'secondary_bg_color' && secondaryBgColor) {\n        setCSSVar(headerVar, secondaryBgColor);\n      }\n    }\n\n    setCSSVar(bgVar, miniApp.bgColor)\n  };\n\n  const listeners = [\n    themeParams.on('change', actualize),\n    miniApp.on('change', actualize),\n  ];\n\n  actualize();\n\n  return () => listeners.forEach(off => off());\n}\n","import { setCSSVar } from '@/css-vars/setCSSVar.js';\nimport type { ThemeParams } from '@/components/ThemeParams/ThemeParams.js';\nimport type { CleanupFn } from '@/types/index.js';\n\nexport interface GetThemeParamsCSSVarNameFn {\n  /**\n   * @param property - ThemeParams property.\n   * @returns Computed complete CSS variable name.\n   */\n  (property: string): string;\n}\n\n/**\n * Creates CSS variables connected with the passed instance of the ThemeParams class.\n *\n * By default, created CSS variables names are following the pattern \"--tg-theme-{name}\", where\n * {name} is a theme parameters key name converted from camel case to kebab case.\n *\n * Example:\n * --tg-theme-bg-color\n * --tg-theme-secondary-text-color\n *\n * Variables are being automatically updated in case, corresponding properties updated in\n * the passed ThemeParams instance.\n *\n * @param themeParams - ThemeParams instance.\n * @param getCSSVarName - function, returning complete CSS variable name for the specified\n * ThemeParams property.\n * @returns Function to stop updating variables.\n */\nexport function bindThemeParamsCSSVars(\n  themeParams: ThemeParams,\n  getCSSVarName?: GetThemeParamsCSSVarNameFn,\n): CleanupFn {\n  getCSSVarName ||= (property) => {\n    return `--tg-theme-${property.replace(/[A-Z]/g, (m) => `-${m.toLowerCase()}`)}`;\n  };\n\n  const actualize = () => {\n    Object.entries(themeParams.getState()).forEach(([k, v]) => {\n      if (v) {\n        setCSSVar(getCSSVarName(k), v);\n      }\n    });\n  };\n\n  actualize();\n\n  return themeParams.on('change', actualize);\n}\n","import { setCSSVar } from '@/css-vars/setCSSVar.js';\nimport type { Viewport } from '@/components/Viewport/Viewport.js';\nimport type { CleanupFn } from '@/types/index.js';\n\nexport interface GetViewportCSSVarNameFn {\n  /**\n   * @param property - Viewport property.\n   * @returns Computed complete CSS variable name.\n   */\n  (property: 'width' | 'height' | 'stable-height'): string;\n}\n\n/**\n * Accepts Viewport instance and sets CSS variables connected with viewport\n * sizes.\n *\n * Be careful using this function as long as it can impact application\n * performance. Viewport size is changing rather often, this makes CSS\n * variables update, which leads to possible layout redraw.\n *\n * Variables:\n * - `--tg-viewport-height`\n * - `--tg-viewport-width`\n * - `--tg-viewport-stable-height`\n *\n * Variables are being automatically updated in case, corresponding properties\n * updated in passed Viewport instance.\n *\n * @param viewport - Viewport instance.\n * @param getCSSVarName - function, returning complete CSS variable name for the specified\n * Viewport property.\n * @returns Function to stop updating variables.\n */\nexport function bindViewportCSSVars(\n  viewport: Viewport,\n  getCSSVarName?: GetViewportCSSVarNameFn,\n): CleanupFn {\n  getCSSVarName ||= (property) => `--tg-viewport-${property}`;\n  const [\n    heightVar,\n    widthVar,\n    stableHeightVar,\n  ] = (['height', 'width', 'stable-height'] as const).map((prop) => getCSSVarName(prop));\n  const setHeight = () => setCSSVar(heightVar, `${viewport.height}px`);\n  const setWidth = () => setCSSVar(widthVar, `${viewport.width}px`);\n  const setStableHeight = () => setCSSVar(stableHeightVar, `${viewport.stableHeight}px`);\n\n  // TODO: Should probably add debounce or throttle.\n  const listeners = [\n    viewport.on('change:height', setHeight),\n    viewport.on('change:width', setWidth),\n    viewport.on('change:stableHeight', setStableHeight),\n  ];\n\n  setHeight();\n  setWidth();\n  setStableHeight();\n\n  return () => listeners.forEach(off => off());\n}\n","import { on } from '@/bridge/events/listening/on.js';\nimport { postEvent } from '@/bridge/methods/postEvent.js';\n\ninterface CleanupFn {\n  (): void;\n}\n\n/**\n * Performs initialization process in the web version of Telegram.\n * @returns Function, which performs cleanup removing all created elements and listeners.\n * @param acceptCustomStyles - true if SDK should accept styles sent from the Telegram web\n * application. This option is only used in web versions of Telegram. Default: false.\n */\nexport function initWeb(acceptCustomStyles = true): CleanupFn {\n  const listeners: CleanupFn[] = [\n    on('reload_iframe', () => {\n      postEvent('iframe_will_reload');\n      window.location.reload();\n    }),\n  ];\n  const cleanup: CleanupFn = () => listeners.forEach((l) => l());\n\n  if (acceptCustomStyles) {\n    const style = document.createElement('style');\n    style.id = 'telegram-custom-styles';\n    document.head.appendChild(style);\n\n    listeners.push(\n      on('set_custom_style', (html) => {\n        // It is safe to use innerHTML here as long as style tag has a special behavior related\n        // to the specified content. In case, any script will be passed here, it will not be\n        // executed.\n        style.innerHTML = html;\n      }),\n      () => document.head.removeChild(style),\n    );\n  }\n\n  // Notify Telegram, iframe is ready. This will result in sending style tag html from native\n  // application which is used in catchCustomStyles function. We should call this method also\n  // to start receiving \"reload_iframe\" events from the Telegram application.\n  postEvent('iframe_ready', { reload_supported: true });\n\n  return cleanup;\n}\n","/**\n * @returns True, if current environment is server.\n */\nexport function isSSR(): boolean {\n  return typeof window === 'undefined';\n}\n","import { request } from '@/bridge/request.js';\nimport { hasWebviewProxy } from '@/env/hasWebviewProxy.js';\n\n/**\n * Returns true in case, current environment is Telegram Mini Apps.\n */\nexport async function isTMA(): Promise<boolean> {\n  if (hasWebviewProxy(window)) {\n    return true;\n  }\n  try {\n    await request({ method: 'web_app_request_theme', event: 'theme_changed', timeout: 100 });\n    return true;\n  } catch {\n    return false;\n  }\n}\n","import { saveToStorage } from '@/launch-params/saveToStorage.js';\nimport { parseMessage } from '@/bridge/parseMessage.js';\nimport { isIframe } from '@/env/isIframe.js';\nimport { hasExternalNotify } from '@/env/hasExternalNotify.js';\nimport { emitMiniAppsEvent } from '@/bridge/events/event-handlers/emitMiniAppsEvent.js';\nimport { serializeThemeParams } from '@/components/ThemeParams/parsing/serializeThemeParams.js';\nimport { parseLaunchParams } from '@/launch-params/parseLaunchParams.js';\nimport type { LaunchParams } from '@/launch-params/types.js';\nimport type { MiniAppsEventPayload } from '@/bridge/events/types.js';\n\n/**\n * Mocks a Telegram application environment.\n * @param launchParamsRaw - launch parameters presented as a string or query parameters.\n */\nexport function mockTelegramEnv(launchParamsRaw: LaunchParams | string): void {\n  const lp = typeof launchParamsRaw === 'string'\n    ? parseLaunchParams(launchParamsRaw)\n    : launchParamsRaw;\n\n  // Save launch params in the storage, so retrieveLaunchParams will return them.\n  saveToStorage(lp);\n\n  function wiredPostMessage(data: unknown): void {\n    if (typeof data !== 'string') {\n      return;\n    }\n    try {\n      const { eventType } = parseMessage(data);\n\n      if (eventType === 'web_app_request_theme') {\n        emitMiniAppsEvent('theme_changed', {\n          theme_params: JSON.parse(serializeThemeParams(lp.themeParams)),\n        } satisfies MiniAppsEventPayload<'theme_changed'>);\n      }\n\n      if (eventType === 'web_app_request_viewport') {\n        emitMiniAppsEvent('viewport_changed', {\n          width: window.innerWidth,\n          height: window.innerHeight,\n          is_state_stable: true,\n          is_expanded: true,\n        } satisfies MiniAppsEventPayload<'viewport_changed'>);\n      }\n    } catch {\n    }\n  }\n\n  // Override all possible ways of calling a Mini Apps method.\n  if (isIframe()) {\n    const postMessage = window.parent.postMessage.bind(window.parent);\n    window.parent.postMessage = data => {\n      void wiredPostMessage(data);\n      postMessage(data);\n    };\n    return;\n  }\n\n  if (hasExternalNotify(window)) {\n    const notify = window.external.notify.bind(window.external);\n    window.external.notify = data => {\n      void wiredPostMessage(data);\n      notify(data);\n    };\n    return;\n  }\n\n  const proxy = (window as any).TelegramWebviewProxy;\n  (window as any).TelegramWebviewProxy = {\n    ...(proxy || {}),\n    postEvent(...args: any) {\n      void wiredPostMessage(JSON.stringify({ eventType: args[0], eventData: args[1] }));\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      proxy && proxy.postEvent(...args);\n    },\n  };\n}\n","import { SDKError } from './SDKError.js';\n\n/**\n * @returns True, if passed value is an instance of SDKError.\n * @param value - value to check.\n */\nexport function isSDKError(value: unknown): value is SDKError {\n  return value instanceof SDKError;\n}\n","import { isSDKError } from './isSDKError.js';\nimport type { ErrorType } from './errors.js';\n\n/**\n * Returns true if passed value is an SDK error of specified type.\n * @param value - value to check.\n * @param type - error type.\n */\nexport function isSDKErrorOfType(value: unknown, type: ErrorType): boolean {\n  return isSDKError(value) && value.type === type;\n}\n","import type {\n  BasicNavigatorAnyHistoryItem,\n  BasicNavigatorHistoryItem,\n} from '@/navigation/BasicNavigator/types.js';\n\n/**\n * Converts any known history item type to the local one.\n * @param item - history item presented as a string or an object.\n * @param relativePathname - relative pathname.\n */\nexport function prepareItem<Params>(\n  item: BasicNavigatorAnyHistoryItem<Params>,\n  relativePathname: string,\n): Readonly<BasicNavigatorHistoryItem<Params>> {\n  let pathname: string;\n  let params: Params | undefined;\n  let id: string | undefined;\n\n  if (typeof item === 'string') {\n    pathname = item;\n  } else {\n    pathname = item.pathname === undefined\n      ? relativePathname\n      : item.pathname;\n    params = item.params;\n    id = item.id;\n  }\n\n  return Object.freeze({\n    id: id || ((Math.random() * 2 ** 14) | 0).toString(16),\n    pathname,\n    params,\n  });\n}\n","import { off } from '@/bridge/events/listening/off.js';\nimport { on } from '@/bridge/events/listening/on.js';\nimport { type PostEvent, postEvent as defaultPostEvent } from '@/bridge/methods/postEvent.js';\nimport { createError } from '@/errors/createError.js';\nimport {\n  ERR_NAVIGATION_HISTORY_EMPTY,\n  ERR_NAVIGATION_INDEX_INVALID,\n} from '@/errors/errors.js';\nimport { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport { prepareItem } from '@/navigation/BasicNavigator/prepareItem.js';\nimport type {\n  BasicNavigatorAnyHistoryItem,\n  BasicNavigatorEvents,\n  BasicNavigatorHistoryItem,\n} from '@/navigation/BasicNavigator/types.js';\n\ntype Emitter<Params> = EventEmitter<BasicNavigatorEvents<Params>>;\n\nexport class BasicNavigator<Params = {}> {\n  /**\n   * Navigation history.\n   */\n  readonly history: Readonly<BasicNavigatorHistoryItem<Params>>[];\n\n  private readonly ee: Emitter<Params> = new EventEmitter();\n\n  constructor(\n    /**\n     * Navigation history.\n     */\n    history: readonly BasicNavigatorAnyHistoryItem<Params>[],\n    /**\n     * Currently active history item.\n     */\n    private _index: number,\n    /**\n     * Function to call Mini Apps methods.\n     * @default Global `postEvent` function.\n     */\n    private readonly postEvent: PostEvent = defaultPostEvent,\n  ) {\n    if (history.length === 0) {\n      throw createError(ERR_NAVIGATION_HISTORY_EMPTY, 'History should not be empty.');\n    }\n\n    if (_index < 0 || _index >= history.length) {\n      throw createError(\n        ERR_NAVIGATION_INDEX_INVALID,\n        'Index should not be zero and higher or equal than history size.',\n      );\n    }\n    this.history = history.map((item) => prepareItem(item, ''));\n  }\n\n  /**\n   * True, if current navigator is currently attached.\n   */\n  private attached = false;\n\n  /**\n   * Allows this navigator to control the `BackButton` visibility state. It also tracks the\n   * `BackButton` clicks and calls the `back` method.\n   */\n  attach(): void {\n    if (!this.attached) {\n      this.attached = true;\n      this.sync();\n      on('back_button_pressed', this.back);\n    }\n  }\n\n  /**\n   * Goes to the previous history item.\n   */\n  back = (): void => this.go(-1);\n\n  /**\n   * Currently active history item.\n   */\n  get current(): Readonly<BasicNavigatorHistoryItem<Params>> {\n    return this.history[this.index];\n  }\n\n  /**\n   * Prevents current navigator from controlling the BackButton visibility state.\n   */\n  detach(): void {\n    this.attached = false;\n    off('back_button_pressed', this.back);\n  }\n\n  /**\n   * Goes to the next history item.\n   */\n  forward(): void {\n    this.go(1);\n  }\n\n  /**\n   * Changes currently active history item index by the specified delta. This method doesn't\n   * change index in case, the updated index points to the non-existing history item. This behavior\n   * is preserved until the `fit` argument is specified.\n   * @param delta - index delta.\n   * @param fit - cuts the delta argument to fit the bounds `[0, history.length - 1]`.\n   */\n  go(delta: number, fit?: boolean): void {\n    // Compute the next index.\n    const index = this.index + delta;\n\n    // Cut the index to be in bounds [0, history.length - 1].\n    const fitIndex = Math.min(\n      Math.max(0, index),\n      this.history.length - 1,\n    );\n\n    // We perform \"go\" only in case, computed and cut indexes are equal or \"fit\" option was\n    // specified.\n    if (index === fitIndex || fit) {\n      // We are just calling setter to update the index and emit all related events.\n      this.replaceAndMove(fitIndex, this.history[fitIndex]);\n    }\n  }\n\n  /**\n   * Goes to the specified index. Method does nothing in case, passed index is out of bounds.\n   *\n   * If \"fit\" option was specified and index is out of bounds, it will be cut to the nearest\n   * bound.\n   * @param index - target index.\n   * @param fit - cuts the index argument to fit the bounds `[0, history.length - 1]`.\n   */\n  goTo(index: number, fit?: boolean): void {\n    this.go(index - this.index, fit);\n  }\n\n  /**\n   * True if navigator has items before the current item.\n   */\n  get hasPrev(): boolean {\n    return this.index > 0;\n  }\n\n  /**\n   * True if navigator has items after the current item.\n   */\n  get hasNext(): boolean {\n    return this.index !== this.history.length - 1;\n  }\n\n  /**\n   * Currently active history item index.\n   */\n  get index(): number {\n    return this._index;\n  }\n\n  /**\n   * Adds new event listener.\n   */\n  on: Emitter<Params>['on'] = this.ee.on.bind(this.ee);\n\n  /**\n   * Removes event listener.\n   */\n  off: Emitter<Params>['off'] = this.ee.off.bind(this.ee);\n\n  /**\n   * Adds a new history item removing all after the current one.\n   * @param item - item to add.\n   */\n  push(item: BasicNavigatorAnyHistoryItem<Params>): void {\n    if (this.hasNext) {\n      this.history.splice(this.index + 1);\n    }\n    this.replaceAndMove(this.index + 1, prepareItem(item, this.current.pathname));\n  }\n\n  /**\n   * Replaces the current history item.\n   * @param item - item to replace the current item with.\n   */\n  replace(item: BasicNavigatorAnyHistoryItem<Params>): void {\n    this.replaceAndMove(this.index, prepareItem(item, this.current.pathname));\n  }\n\n  /**\n   * Sets history item by the specified index.\n   * @param index - history item index to replace.\n   * @param historyItem - history item to set.\n   */\n  private replaceAndMove(index: number, historyItem: BasicNavigatorHistoryItem<Params>): void {\n    const delta = index - this.index;\n    if (!delta && this.current === historyItem) {\n      // Nothing changed.\n      return;\n    }\n\n    const from = this.current;\n\n    if (this.index !== index) {\n      const prevIndex = this._index;\n      this._index = index;\n\n      // If navigator is attached and back button local visibility state changed, we should\n      // notify Telegram app about it.\n      if (this.attached && prevIndex > 0 !== index > 0) {\n        this.sync();\n      }\n    }\n\n    this.history[index] = historyItem;\n    this.ee.emit('change', {\n      navigator: this,\n      from,\n      to: this.current,\n      delta,\n    });\n  }\n\n  /**\n   * Actualizes the `BackButton` visibility state.\n   */\n  private sync(): void {\n    this.postEvent('web_app_setup_back_button', { is_visible: !!this.index });\n  }\n}\n","import type { BasicNavigatorHistoryItem } from '@/navigation/BasicNavigator/types.js';\nimport type {\n  BrowserNavigatorHistoryItem,\n  BrowserNavigatorHistoryItemParams,\n} from '@/navigation/BrowserNavigator/types.js';\n\n/**\n * Converts basic navigator entry to browser navigator entry.\n */\nexport function basicItemToBrowser<State>(\n  {\n    params,\n    ...rest\n  }: BasicNavigatorHistoryItem<BrowserNavigatorHistoryItemParams<State>>,\n): BrowserNavigatorHistoryItem<State> {\n  return { ...(params || { hash: '', search: '' }), ...rest };\n}\n","import { createSafeURL } from '@/navigation/createSafeURL.js';\nimport type { URLLike } from '@/navigation/BrowserNavigator/types.js';\n\n/**\n * Extracts path part from a URL.\n * @param urlOrPath - URL instance or path.\n */\nexport function urlToPath(urlOrPath: string | Partial<URLLike>): string {\n  const isAbsolute = typeof urlOrPath === 'string'\n    ? urlOrPath.startsWith('/')\n    : !!(urlOrPath.pathname && urlOrPath.pathname.startsWith('/'));\n  const url = createSafeURL(urlOrPath);\n\n  return `${isAbsolute ? url.pathname : url.pathname.slice(1)}${url.search}${url.hash}`;\n}\n","import { ensurePrefix } from '@/navigation/ensurePrefix.js';\nimport { urlToPath } from '@/navigation/urlToPath.js';\nimport type { BrowserNavigatorAnyHistoryItem } from '@/navigation/BrowserNavigator/types.js';\n\ninterface PrepareItemResult<State> {\n  id?: string;\n  pathname: string;\n  params: {\n    hash: string;\n    search: string;\n    state?: State;\n  };\n}\n\n/**\n * Converts a path, presented as a string to a basic navigator appropriate form.\n * @param path - full path.\n * @param relativePath - relative path.\n * @param state - history item state.\n */\nexport function prepareItem<State>(\n  path: string,\n  relativePath: string,\n  state?: State,\n): PrepareItemResult<State>;\n\n/**\n * Converts a path, presented as an object to a basic navigator appropriate form.\n * @param item - history item data.\n * @param relativePath - relative path.\n */\nexport function prepareItem<State>(\n  item: BrowserNavigatorAnyHistoryItem<State>,\n  relativePath: string,\n): PrepareItemResult<State>;\n\nexport function prepareItem<State>(\n  itemOrPath: string | BrowserNavigatorAnyHistoryItem<State>,\n  relativePath: string,\n  state?: State,\n): PrepareItemResult<State> {\n  let path: string;\n  let id: string | undefined;\n\n  if (typeof itemOrPath === 'string') {\n    path = itemOrPath;\n  } else {\n    path = urlToPath(itemOrPath);\n    state = itemOrPath.state;\n    id = itemOrPath.id;\n  }\n\n  const { pathname, search, hash } = new URL(path, `http://a${ensurePrefix(relativePath, '/')}`);\n  return { id, pathname, params: { hash, search, state } };\n}\n","import { onWindow } from '@/events/onWindow.js';\n\n/**\n * Performs window.history.go operation waiting for it to be completed.\n * @param delta - history change delta.\n */\nexport async function go(delta: number): Promise<boolean> {\n  if (delta === 0) {\n    return true;\n  }\n\n  // We expect popstate event to occur during some time. Yeah, this seems tricky and not stable,\n  // but it seems like we have no other way out. Waiting for Navigation API to be implemented in\n  // browsers.\n  return Promise.race<boolean>([\n    new Promise((res) => {\n      const remove = onWindow('popstate', () => {\n        remove();\n        res(true);\n      });\n\n      window.history.go(delta);\n    }),\n\n    // Usually, it takes about 1ms to emit this event, but we use some buffer.\n    new Promise((res) => {\n      setTimeout(res, 50, false);\n    }),\n  ]);\n}\n","import { createSafeURL } from '@/navigation/createSafeURL.js';\nimport type { URLLike } from '@/navigation/BrowserNavigator/types.js';\n\n/**\n * Extracts pathname from the value.\n * @param value - source value.\n */\nexport function getPathname(value: string | Partial<URLLike>): string {\n  return createSafeURL(value).pathname;\n}\n","import { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport { BasicNavigator } from '@/navigation/BasicNavigator/BasicNavigator.js';\nimport { basicItemToBrowser } from '@/navigation/BrowserNavigator/basicItemToBrowser.js';\nimport { prepareItem } from '@/navigation/BrowserNavigator/prepareItem.js';\nimport { createSafeURL } from '@/navigation/createSafeURL.js';\nimport { drop } from '@/navigation/drop.js';\nimport { ensurePrefix } from '@/navigation/ensurePrefix.js';\nimport { getPathname } from '@/navigation/getPathname.js';\nimport { go } from '@/navigation/go.js';\nimport { urlToPath } from '@/navigation/urlToPath.js';\nimport type { BasicNavigatorEvents } from '@/navigation/BasicNavigator/types.js';\nimport type {\n  BrowserNavigatorAnyHistoryItem,\n  BrowserNavigatorConOptions,\n  BrowserNavigatorEvents,\n  BrowserNavigatorHashMode,\n  BrowserNavigatorHistoryItem,\n  BrowserNavigatorHistoryItemParams,\n  URLLike,\n} from '@/navigation/BrowserNavigator/types.js';\n\nconst CURSOR_VOID = 0;\nconst CURSOR_BACK = 1;\nconst CURSOR_FORWARD = 2;\n\ntype Navigator<State> = BasicNavigator<BrowserNavigatorHistoryItemParams<State>>;\ntype Emitter<State> = EventEmitter<BrowserNavigatorEvents<State>>;\n\nexport class BrowserNavigator<State = {}> {\n  private readonly navigator: Navigator<State>;\n\n  private readonly ee: Emitter<State> = new EventEmitter();\n\n  readonly hashMode: BrowserNavigatorHashMode | null;\n\n  readonly base: string;\n\n  constructor(\n    /**\n     * Navigation history.\n     */\n    history: readonly BrowserNavigatorAnyHistoryItem<State>[],\n    /**\n     * Currently active history item index.\n     */\n    index: number,\n    { postEvent, hashMode = 'classic', base }: BrowserNavigatorConOptions = {},\n  ) {\n    this.navigator = new BasicNavigator(\n      history.map((item) => prepareItem(item, '/')),\n      index,\n      postEvent,\n    );\n    this.navigator.on('change', (e) => {\n      void this.onNavigatorChange(e);\n    });\n    this.hashMode = hashMode;\n    this.base = getPathname(base || '');\n  }\n\n  /**\n   * Shows whether the navigator is currently attached to the browser history.\n   */\n  private attached = false;\n\n  /**\n   * Attaches current navigator to the browser history allowing navigator to manipulate it.\n   */\n  async attach(): Promise<void> {\n    if (!this.attached) {\n      this.attached = true;\n      this.navigator.attach();\n      window.addEventListener('popstate', this.onPopState);\n      await this.syncHistory();\n    }\n  }\n\n  /**\n   * Goes back in history by 1.\n   */\n  back(): void {\n    this.navigator.back();\n  }\n\n  /**\n   * Detaches current navigator from the browser history.\n   */\n  detach() {\n    this.attached = false;\n    this.navigator.detach();\n    window.removeEventListener('popstate', this.onPopState);\n  }\n\n  /**\n   * Goes forward in history.\n   */\n  forward(): void {\n    return this.navigator.forward();\n  }\n\n  /**\n   * Current history cursor.\n   */\n  get index(): number {\n    return this.navigator.index;\n  }\n\n  /**\n   * Current history item identifier.\n   */\n  get id(): string {\n    return this.navigator.current.id;\n  }\n\n  /**\n   * Changes currently active history item index by the specified delta. This method doesn't\n   * change index in case, the updated index points to the non-existing history item. This behavior\n   * is preserved until the `fit` argument is specified.\n   * @param delta - index delta.\n   * @param fit - cuts the delta argument to fit the bounds `[0, history.length - 1]`.\n   */\n  go(delta: number, fit?: boolean): void {\n    return this.navigator.go(delta, fit);\n  }\n\n  /**\n   * Goes to the specified index. Method does nothing in case, passed index is out of bounds.\n   *\n   * If \"fit\" option was specified and index is out of bounds, it will be cut to the nearest\n   * bound.\n   * @param index - target index.\n   * @param fit - cuts the index argument to fit the bounds `[0, history.length - 1]`.\n   */\n  goTo(index: number, fit?: boolean): void {\n    this.navigator.goTo(index, fit);\n  }\n\n  /**\n   * Current history item hash.\n   * @see URL.hash\n   * @example\n   * \"\", \"#my-hash\"\n   */\n  get hash(): string {\n    return (this.navigator.current.params || {}).hash || '';\n  }\n\n  /**\n   * True if navigator has items before the current item.\n   */\n  get hasPrev(): boolean {\n    return this.navigator.hasPrev;\n  }\n\n  /**\n   * True if navigator has items after the current item.\n   */\n  get hasNext(): boolean {\n    return this.navigator.hasNext;\n  }\n\n  /**\n   * Navigation history.\n   */\n  get history(): BrowserNavigatorHistoryItem<State>[] {\n    return this.navigator.history.map(basicItemToBrowser);\n  }\n\n  /**\n   * Handles the window \"popstate\" event.\n   * @param state - event state.\n   */\n  private onPopState = ({ state }: PopStateEvent) => {\n    // In case state is null, we recognize current event as occurring whenever user clicks\n    // any anchor.\n    // TODO: Should we do it?\n    if (state === null) {\n      return this.push(this.parsePath(window.location.href));\n    }\n\n    // There is only one case when state can be CURSOR_VOID - when history contains\n    // only one element. In this case, we should return user to the current history element.\n    if (state === CURSOR_VOID) {\n      window.history.forward();\n    } else if (state === CURSOR_BACK) {\n      this.back();\n    }\n    if (state === CURSOR_FORWARD) {\n      this.forward();\n    }\n  };\n\n  /**\n   * Underlying navigator change event listener.\n   */\n  private onNavigatorChange = async ({\n    to,\n    from,\n    delta,\n  }: BasicNavigatorEvents<BrowserNavigatorHistoryItemParams<State>>['change']) => {\n    // If this navigator is attached to the browser history, we should synchronize.\n    if (this.attached) {\n      await this.syncHistory();\n    }\n    this.ee.emit('change', {\n      delta,\n      from: basicItemToBrowser(from),\n      to: basicItemToBrowser(to),\n      navigator: this,\n    });\n  };\n\n  /**\n   * Adds new event listener.\n   */\n  on: Emitter<State>['on'] = this.ee.on.bind(this.ee);\n\n  /**\n   * Removes event listener.\n   */\n  off: Emitter<State>['off'] = this.ee.off.bind(this.ee);\n\n  /**\n   * Path, including pathname, search and hash.\n   * @example Pathname only.\n   * \"/pathname\"\n   * @example Pathname + search.\n   * \"/pathname?search\"\n   * @example Pathname + hash.\n   * \"/pathname#hash\"\n   * @example Pathname + search + hash.\n   * \"/pathname?search#hash\"\n   */\n  get path(): string {\n    return urlToPath(this);\n  }\n\n  /**\n   * Current pathname. Always starts with the slash.\n   * @see URL.pathname\n   * @example\n   * \"/\", \"/abc\"\n   */\n  get pathname(): string {\n    return this.navigator.current.pathname;\n  }\n\n  /**\n   * Depending on the current navigation type, parses incoming path and returns it presented as\n   * an object. In other words, this method parses the passed path and returns object, describing\n   * how the navigator \"sees\" it.\n   *\n   * @example Hash mode is omitted.\n   * parsePath('/abc?a=1#hash');\n   * // { pathname: '/abc', search: '?a=1', hash: '#hash' }\n   * parsePath('http://example.com/abc?a=1#hash');\n   * // { pathname: '/abc', search: '?a=1', hash: '#hash' }\n   *\n   * @example Hash mode is enabled.\n   * parsePath('/abc?a=1#tma?is=cool#yeah');\n   * // { pathname: '/tma', search: '?is=cool', hash: '#yeah' }\n   * parsePath('http://example.com/abc?a=1#tma?is=cool#yeah');\n   * // { pathname: '/tma', search: '?is=cool', hash: '#yeah' }\n   */\n  parsePath(path: string | URL): URLLike {\n    let url = createSafeURL(path);\n    if (this.hashMode) {\n      url = createSafeURL(url.hash.slice(1));\n    }\n\n    return {\n      pathname: url.pathname,\n      search: url.search,\n      hash: url.hash,\n    };\n  }\n\n  /**\n   * Pushes new history item. Method replaces all entries after the current one with the one\n   * being pushed. Take a note, that passed item is always relative. In case, you want to use\n   * it as an absolute one, use the \"/\" prefix. Example: \"/absolute\", { pathname: \"/absolute\" }.\n   *\n   * To create a final path, navigator uses a method, used in the URL class constructor, resolving\n   * a path based on the current one.\n   * @param path - entry path.\n   * @param state - entry state.\n   *\n   * @example Pushing an absolute path.\n   * push(\"/absolute\"); // \"/absolute\"\n   *\n   * @example Pushing a relative path.\n   * push(\"relative\"); // \"/home/root\" -> \"/home/relative\"\n   *\n   * @example Pushing query parameters.\n   * push(\"/absolute?my-param=1\"); // \"/home/root\" -> \"/absolute?my-param=1\"\n   * push(\"relative?my-param=1\"); // \"/home/root\" -> \"/home/relative?my-param=1\"\n   * push(\"?my-param=1\"); // \"/home\" -> \"/home?my-param=1\"\n   *\n   * @example Pushing hash.\n   * push(\"#my-hash\"); // \"/home\" -> \"/home#my-hash\"\n   * push(\"relative#my-hash\"); // \"/home/root\" -> \"/home/relative#my-hash\"\n   *\n   * @example Pushing state.\n   * push(\"\", { state: 'my-state' }); \"/home/root\" -> \"/home/root\"\n   * push({ state: 'my-state' }); \"/home/root\" -> \"/home/root\"\n   */\n  push(path: string, state?: State): void;\n  push(item: BrowserNavigatorAnyHistoryItem<State>): void;\n  push(itemOrPath: string | BrowserNavigatorAnyHistoryItem<State>, fnState?: State): void {\n    const item = prepareItem(itemOrPath, this.path);\n    const { state = fnState } = item.params;\n    this.navigator.push({ ...item, params: { ...item.params, state } });\n  }\n\n  /**\n   * Replaces the current history item. Has the same logic as the `push` method.\n   * @param path - entry path.\n   * @param state - entry state.\n   * @see push\n   */\n  replace(path: string, state?: State): void;\n  replace(item: BrowserNavigatorAnyHistoryItem<State>): void;\n  replace(itemOrPath: string | BrowserNavigatorAnyHistoryItem<State>, fnState?: State): void {\n    const item = prepareItem(itemOrPath, this.path);\n    const { state = fnState } = item.params;\n    this.navigator.replace({ ...item, params: { ...item.params, state } });\n  }\n\n  /**\n   * Combines the navigator `base` property with the passed path data applying the navigator\n   * navigation mode.\n   * @param value - path presented as string or URLLike.\n   */\n  renderPath(value: string | URLLike): string {\n    const path = (this.base.length === 1 ? '' : this.base)\n      + ensurePrefix(urlToPath(value), '/');\n\n    return this.hashMode\n      ? ensurePrefix(path.slice(1), this.hashMode === 'classic' ? '#' : '#/')\n      : path;\n  }\n\n  /**\n   * Synchronizes current navigator state with browser history.\n   */\n  private async syncHistory(): Promise<void> {\n    // Remove history change event listener to get rid of side effects related to the possible\n    // future calls of history.go.\n    window.removeEventListener('popstate', this.onPopState);\n\n    const { state } = this;\n    const path = this.renderPath(this);\n\n    // Drop the browser history and work with the clean one.\n    await drop();\n\n    if (this.hasPrev && this.hasNext) {\n      // We have both previous and next elements. History should be:\n      // [back, *current*, forward]\n      window.history.replaceState(CURSOR_BACK, '');\n      window.history.pushState(state, '', path);\n      window.history.pushState(CURSOR_FORWARD, '');\n\n      await go(-1);\n    } else if (this.hasPrev) {\n      // We have only previous element. History should be:\n      // [back, *current*]\n      window.history.replaceState(CURSOR_BACK, '');\n      window.history.pushState(state, '', path);\n    } else if (this.hasNext) {\n      // We have only next element. History should be:\n      // [*current*, forward]\n      window.history.replaceState(state, path);\n      window.history.pushState(CURSOR_FORWARD, '');\n\n      await go(-1);\n    } else {\n      // We have no back and next elements. History should be:\n      // [void, *current*]\n      window.history.replaceState(CURSOR_VOID, '');\n      window.history.pushState(state, '', path);\n    }\n\n    window.addEventListener('popstate', this.onPopState);\n  }\n\n  /**\n   * Current query parameters.\n   * @see URL.search\n   * @example\n   * \"\", \"?\", \"?a=1\"\n   */\n  get search(): string {\n    return (this.navigator.current.params || {}).search || '';\n  }\n\n  /**\n   * Current history item state.\n   */\n  get state(): State | undefined {\n    return (this.navigator.current.params || {}).state;\n  }\n}\n","import { go } from '@/navigation/go.js';\n\n/**\n * Drops current browser history switching browser history cursor to the first one entry.\n */\nexport async function drop(): Promise<void> {\n  if (window.history.length <= 1) {\n    return;\n  }\n\n  // Push empty state to cut states we have no access to, placed after the current one.\n  window.history.pushState(null, '');\n\n  // By this line of code we cover the most recent case, when application is opened in WebView,\n  // but not in iframe. Applications opened in WebView have simple browser history containing\n  // only entries belonging to the current web application.\n  const goPerformed = await go(1 - window.history.length);\n  if (goPerformed) {\n    return;\n  }\n\n  // Nevertheless, iframe works a bit different in context of browser history. Calling\n  // window.history.length in iframe will return browser history information related to the\n  // external web environment too (e.g. browser tab). So, iframe shares the browser history with\n  // the external application, but has no access to its history entries. Calling window.history.go\n  // pointing out to the entry belonging to the external application will have no impact, so the\n  // previous idea with go(1 - ...) will not work.\n  //\n  // This is the reason why we iteratively call go(-1) to meet the entry which is recognized as\n  // the initial one for the current iframe.\n  let shouldGoBack = await go(-1);\n  while (shouldGoBack) {\n    shouldGoBack = await go(-1);\n  }\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_INVALID_PATH_BASE } from '@/errors/errors.js';\nimport { BrowserNavigator } from '@/navigation/BrowserNavigator/BrowserNavigator.js';\nimport { getPathname } from '@/navigation/getPathname.js';\nimport { urlToPath } from '@/navigation/urlToPath.js';\nimport type { BrowserNavigatorConOptions } from '@/navigation/BrowserNavigator/types.js';\n\nexport function createBrowserNavigatorFromLocation<State>(\n  options?: BrowserNavigatorConOptions,\n): BrowserNavigator<State> {\n  options ||= {};\n  const { href, hash } = window.location;\n\n  let path = urlToPath(\n    options.hashMode === null\n      // Hash mode is explicitly disabled. We are working with the usual location path.\n      ? href\n      // If hash mode is enabled, we should create a navigator based on the location's hash.\n      // In this case we have 2 possible situations:\n      // 1. Hash contains only launch parameters. Example:\n      // #tgWebAppData=...&tgWebAppPlatform=...&...\n      // Here we should mark the launch parameters as query parameters and have pathname \"/\" as\n      // the initial one.\n      //\n      // 2. Hash contains value, passed from above and launch parameters as query parameters.\n      // For instance, we could have such a URL:\n      // https://t.me/mybot/myapp#my-hash\n      // In this case, the Mini App will be opened with this URL:\n      // https://example.com/#my-hash?tgWebAppData=...&tgWebAppPlatform=...&...\n      : hash.includes('?') ? hash.slice(1) : `?${hash.slice(1)}`,\n  );\n\n  // If some base was specified, we should check if computed path starts with this base. In\n  // case it does, it should be removed from the path. Otherwise, an error must be thrown.\n  const base = options.base ? getPathname(options.base) : undefined;\n  if (base) {\n    if (!path.startsWith(base)) {\n      throw createError(\n        ERR_INVALID_PATH_BASE,\n        `Path \"${path}\" expected to be starting with \"${base}\"`,\n      );\n    }\n    path = path.slice(base.length);\n  }\n\n  return new BrowserNavigator<State>([path], 0, options);\n}\n","/**\n * @param value - string to take hash part from.\n * @returns String after the first met \"#\" symbol. In case, value doesn't contain hashtag, the\n * function will return null.\n *\n * @example No hash.\n * getHash('/path'); // null\n *\n * @example Has hash.\n * getHash('/path#abc'); // 'abc'\n *\n * @example Has double hash.\n * getHash('/path#abc#another'); // 'abc#another'\n */\nexport function getHash(value: string): string | null {\n  const match = value.match(/#(.+)/);\n  return match ? match[1] : null;\n}\n","import {\n  BrowserNavigatorConOptions,\n  BrowserNavigatorHistoryItem,\n} from '@/navigation/BrowserNavigator/types.js';\nimport { BrowserNavigator } from '@/navigation/BrowserNavigator/BrowserNavigator.js';\nimport { isPageReload } from '@/navigation/isPageReload.js';\nimport {\n  createBrowserNavigatorFromLocation\n} from '@/navigation/BrowserNavigator/createBrowserNavigatorFromLocation.js';\n\n\nfunction instantiate<State>(\n  sessionStorageKey: string,\n  options?: BrowserNavigatorConOptions,\n): BrowserNavigator<State> {\n  // If page was reloaded, we assume that navigator had to previously save its state in the\n  // session storage.\n  if (isPageReload()) {\n    const stateRaw = sessionStorage.getItem(sessionStorageKey);\n    if (stateRaw) {\n      try {\n        const { index, history } = JSON.parse(stateRaw);\n        return new BrowserNavigator(\n          history as BrowserNavigatorHistoryItem<State>[],\n          index as number,\n          options\n        );\n      } catch (e) {\n        console.error('Unable to restore hash navigator state.', e);\n      }\n    }\n  }\n\n  // In case, we could not restore its state, or it is a fresh start, we can create an empty\n  // navigator. We are creating BrowserNavigator from the window.location.\n  return createBrowserNavigatorFromLocation(options);\n}\n\n/**\n * Initializes a standard Mini Apps navigator.\n * @param sessionStorageKey - session storage key, containing the navigator state.\n * @param options - additional BrowserNavigator options.\n */\nexport function initNavigator<State>(\n  sessionStorageKey: string,\n  options?: BrowserNavigatorConOptions,\n): BrowserNavigator<State> {\n  const navigator = instantiate<State>(sessionStorageKey, options);\n\n  const saveState = () => sessionStorage.setItem(sessionStorageKey, JSON.stringify({\n    index: navigator.index,\n    history: navigator.history,\n  }));\n\n  // Whenever navigator changes its state, we save it in the session storage.\n  navigator.on('change', saveState);\n\n  // Save the initial state to make sure nothing will break when the page was reloaded.\n  saveState();\n\n  return navigator;\n}\n"],"names":["ot","e","t","s","n","reset","at","V","count","unsubscribe","ie","Ht","subscribe","F","constructor","arguments","length","undefined","scope","options","print","Date","r","Intl","DateTimeFormat","hour","minute","second","fractionalSecondDigits","timeZone","format","textColor","i","bgColor","o","this","a","_len","Array","_key","console","concat","error","_len2","_key2","log","_len3","_key3","O","st","_ref","name","payload","Ze","T","c","Map","clear","listeners","subscribeListeners","listenersCount","emit","_len4","_key4","forEach","event","args","get","_ref2","off","on","set","push","splice","G","window","addEventListener","removeEventListener","J","_len5","_key5","flat","D","Error","cause","type","Object","setPrototypeOf","prototype","f","zt","jt","Ft","Jt","Qt","Yt","ct","Zt","Kt","Ke","Xe","Xt","E","M","parser","isOptional","parse","optional","x","w","String","ht","bind","from","pt","JSON","isArray","g","y","Number","isNaN","p","toString","ut","eventType","eventData","te","z","dispatchEvent","MessageEvent","data","stringify","source","parent","se","clipboard_text_received","req_id","custom_method_invoked","result","popup_closed","button_id","viewport_changed","height","width","innerWidth","is_state_stable","is_expanded","ne","innerHeight","h","re","_ref3","L","b","q","oe","split","Math","max","parseInt","_","v","includes","lt","external","notify","dt","TelegramWebviewProxy","postEvent","_t","self","top","ft","ts","ce","R","Gt","postMessage","targetOrigin","he","gt","_ref4","bt","wt","Promise","race","setTimeout","d","capture","timeout","map","method","params","S","j","_len6","_key6","entries","filter","Boolean","join","es","_len7","_key7","reduce","_ref5","Q","test","pe","mt","replace","toLowerCase","repeat","match","slice","yt","sqrt","ue","ee","state","clone","_ref6","Y","vt","Z","super","supports","le","isVisible","show","hide","is_visible","Et","K","URLSearchParams","de","id","title","photoUrl","username","nt","addedToAttachmentMenu","allowsWriteToPm","firstName","isBot","isPremium","languageCode","lastName","xt","authDate","canSendAfter","chat","chatInstance","chatType","hash","queryId","receiver","startParam","user","_e","ge","Pt","_ref7","toUpperCase","fe","X","botInline","initData","initDataRaw","platform","showSettings","themeParams","version","St","be","location","href","Ct","performance","getEntriesByType","we","Tt","Rt","sessionStorage","setItem","At","getItem","me","It","fromEntries","_ref8","ye","qt","ve","kt","xe","l","createRequestId","addCleanup","u","Bt","then","ss","_ref9","k","Nt","available","device_id","token_saved","access_requested","access_granted","deviceId","tokenSaved","accessRequested","accessGranted","Pe","_ref10","auth","openSettings","requestAccess","updateToken","authenticate","_ref11","reason","authPromise","trim","_ref12","token","finally","accessPromise","biometryType","status","Se","ns","async","_ref13","tt","Ce","isConfirmationNeeded","need_confirmation","disableConfirmation","enableConfirmation","rs","_ref14","et","Te","Re","itemParser","of","Ae","rt","Ie","delete","getKeys","keys","key","value","is","_ref15","qe","impactOccurred","notificationOccurred","selectionChanged","impact_style","notification_type","os","_ref16","ke","canSendAfterDate","getTime","as","_ref17","cs","Ne","isOpened","open","hostname","pathname","URL","slug","hs","_ref18","De","_ref19","commit","text","is_active","isEnabled","is_progress_visible","isLoaderVisible","color","text_color","disable","enable","hideLoader","setParams","showLoader","setText","setTextColor","setBgColor","ps","_ref20","buttonTextColor","buttonColor","Dt","Ve","Le","_ref21","requestPhoneAccess","requestWriteAccess","switchInlineQuery","setHeaderColor","setBackgroundColor","supportsParam","getRequestedContact","contact","userId","phoneNumber","close","return_back","headerColor","isBotInline","isDark","ready","requestContact","now","requestPhoneAccessPromise","_ref22","requestWriteAccessPromise","_ref23","sendData","size","Blob","color_key","query","chat_types","us","_ref24","headerBgColor","$e","message","buttons","Be","ls","_ref25","We","ds","_ref26","Ue","_s","_ref27","Mt","He","accentTextColor","destructiveTextColor","getState","hintColor","linkColor","secondaryBgColor","sectionBgColor","sectionHeaderTextColor","sectionSeparatorColor","listen","theme_params","subtitleTextColor","fs","_ref28","gs","A","startsWith","I","search","Oe","readTextFromClipboard","openLink","tryInstantView","url","try_browser","tryBrowser","try_instant_view","openTelegramLink","path_full","shareURL","bs","_ref29","Vt","isExpanded","isStateStable","P","Ge","_ref30","stableHeight","sync","expand","isStable","ws","_ref31","m","document","documentElement","style","setProperty","ms","actualize","ys","_ref32","vs","setHeight","setWidth","setStableHeight","Es","reload","createElement","head","appendChild","innerHTML","removeChild","reload_supported","cleanup","xs","Ps","Ss","ze","Cs","$","freeze","random","je","go","_index","history","attach","attached","back","current","index","detach","forward","min","replaceAndMove","goTo","hasPrev","hasNext","navigator","to","delta","B","_ref33","N","W","C","Lt","$t","hashMode","base","_ref34","parsePath","_ref35","syncHistory","onNavigatorChange","onPopState","path","renderPath","pushState","Fe","replaceState","Je","Ts","Rs","Qe","saveState"],"sourceRoot":""}